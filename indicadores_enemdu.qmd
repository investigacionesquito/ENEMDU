---
title: "Indicadores de la Encuesta Nacional de Empleo, Desempleo y Subempleo para el Distrito Metropolitano de Quito en 2023"
date: 05/05/2024
date-format: "MMMM, YYYY"
authors:
- name: <p style="font-size= 16px"><b>Instituto de Investigaciones de la Ciudad (IIC)</b></p>
- name: "Esteban Meneses"
- name: "Daniela Cueva"
format:
  html:
    theme: cosmo
    css: style.css
    toc: true
    toc-position: right
title-block-banner: "#0077b6"
title-block-banner-color: "white"
editor: visual
execute:
  echo: false
  warning: false
  message: false
  include: true
  error: false
lang: es
fontsize: 11pt
number-sections: true
fig-dpi: 300
---

# Metodología para el análisis de la Encuesta Nacional de Empleo, Desempleo y Subempleo a nivel del Distrito Metropolitano de Quito

## Introducción

La Encuesta Nacional de Empleo, Desempleo y Subempleo (ENEMDU) es una operación estadística fundamental para comprender la situación del empleo en Ecuador. Esta encuesta proporciona información valiosa sobre la actividad económica, las fuentes de ingreso de la población y las tendencias en la población económicamente activa (PEA), población económicamente inactiva (PEI), empleo, subempleo y desempleo a nivel nacional, con niveles de representatividad estadística para las cinco ciudades autorepresentadas; a saber: Quito, Guayaquil, Cuenca, Machala y Ambato.

La ENEMDU se realiza de forma periódica a hogares seleccionados a través de un muestreo probabilístico en dos etapas. En la primera etapa se seleccionan las Unidades Primarias de Muestreo (UPM) por estrato, y en la segunda etapa se seleccionan siete viviendas ocupadas dentro de cada conglomerado. Esta encuesta tiene una cobertura nacional, con excepción de la provincia de Galápagos, y permite desagregar la información a nivel nacional, por área geográfica (urbano y rural) y en las cinco ciudades auto-representadas.

Uno de los aspectos clave de la ENEMDU es su diseño de panel, donde cada panel tiene una duración de dos años y permite medir los cambios en el empleo y desempleo entre meses, trimestres y años consecutivos, así como la estacionalidad en el tiempo. Además, la rotación de paneles con un sistema 2-2-2 permite la compatibilidad con un proceso de actualización cartográfica permanente (INEC, 2018).

## Descripción general de la Encuesta Nacional de Empleo, Desempleo y Subempleo (ENEMDU)

La ENEMDU representa uno de los instrumentos estadísticos más importantes para estudiar la situación del empleo en el país, la caracterización del mercado de trabajo, la actividad económica de los ecuatorianos y las fuentes de ingresos de la población. Además, alimenta al Sistema de Cuentas Nacionales administrado por el Banco Central del Ecuador. Su objetivo principal es generar información sobre la actividad económica y las fuentes de ingreso de la población, además de proporcionar estadísticas sobre los niveles, tendencias, y cambios en el tiempo de la población económicamente activa (PEA), población económicamente inactiva (PEI), el empleo, subempleo, y desempleo en Ecuador (INEC, 2018).

Esta encuesta se realiza a hogares de forma periódica y sus resultados son después imputados a cada persona que conforma dicho hogar. Además, se aplica un factor de expansión para obtener estimaciones de la población real.

### Delimitación de la operación estadística

La ENEMDU es una encuesta por muestreo que tiene como dominio las estadísticas demográficas y sociales sobre el trabajo, el mercado laboral, el empleo y el desempleo. Su universo son las personas de 5 o más años de edad, residentes de del Ecuador, con excepción de la población que reside en viviendas colectivas, viviendas flotantes y sectores con población indigente. La población objetivo son todas las personas de las viviendas particulares dentro del territorio nacional.

La unidad de observación son los hogares en todas las viviendas particulares. Su cobertura es a nivel nacional, por área geográfica (urbano y rural) en todas las provincias del Ecuador, con excepción de la provincia de Galápagos. Los indicadores, tabulados y variables difundidas desde la ENEMDU pueden ser desagregados a nivel nacional, por área geográfica urbano, rural y en las cinco ciudades auto-representadas (Quito, Guayaquil, Cuenca, Machala, Ambato y Loja), por etnia, sexo, grupo estario, entre otros. Su periodicidad y continuidad es mensual, trimestral y anual y se levanta la información los meses de marzo, junio, septiembre y diciembre desde junio de 2007 (INEC, 2018).

### Diseño del marco y de la muestra

El diseño muestral de la ENEMDU corresponde a un muestreo probabilístico con dos etapas de selección.

- Primera etapa: selección de Unidades Primarias de Muestreo (UPM)[^1] por estrato[^2]. 
- Segunda etapa: selección de siete[^3] viviendas ocupadas dentro de cada uno de los conglomerados seleccionados en la primera etapa.

[^1]: Agrupación de viviendas ocupadas en un número entre 30 a 60, próximas entre sí y con límites definidos.

[^2]: Identificación de estrato muestral (aproximación clasificación socio-económica).

[^3]: Resultado del acuerdo de repartición uniforme por conglomerado y la carga operativa.

La UPM es el conglomerado y la Unidad Secundaria de Muestreo (USM) son las viviendas ocupadas[^4].

[^4]: En marzo de 2018 se reconstruyeron y homogenizaron las UPM con respecto al número de viviendas ocupadas, lo que mejora la calidad de los datos.

El marco muestral es construido de acuerdo a los resultados definitivos y la cartografía del VII Censo de Población y VI vivienda del 2010 (CPV-2010). Sin embargo, ha habido actualizaciones cartográficas debido al agotamiento de unidades de observación en determinadas áreas geográficas propios de los movimientos demográficos y los cambios de estructuras habitacionales. Actualmente, existen 1779 sectores y conglomerados (manzanas) (INEC, 2018).

La variable de diseño muestral es el desempleo, tomando como referencia la estimación de esta variable a la ENEMDU 2012. Para el tamaño muestral se requiere de las características a estimar, el nivel de confianza y la precisión requerida. El nivel de confianza usado es del 95% y el margen de error relativo es de 0,15. Finalmente, la muestra es seleccionada por cada estrato dentro de cada dominio de forma aleatoria para cada UPM y USM (INEC, 2018).

Para determinar el tamaño muestral de la ENEMDU, se emplean distintas herramientas metodológicas de índole cuantitativo. Analíticamente y considerando que se encuestan sietes viviendas de cada conglomerado establecido, el INEC encuesta a 2438 conglomerados que equivalen a 17066 viviendas, distribuidas como se observa en la tabla a continuación.



+-------------------------+----------------------------------+-------------------+
| **Código de provincia** | **Provincia**                    | **Conglomerados** |
+-------------------------+----------------------------------+-------------------+
| 01                      | Azuay                            | 208               |
+-------------------------+----------------------------------+-------------------+
| 02                      | Bolívar                          | 38                |
+-------------------------+----------------------------------+-------------------+
| 03                      | Cañar                            | 42                |
+-------------------------+----------------------------------+-------------------+
| 04                      | Carchi                           | 32                |
+-------------------------+----------------------------------+-------------------+
| 05                      | Cotopaxi                         | 72                |
+-------------------------+----------------------------------+-------------------+
| 06                      | Chimborazo                       | 76                |
+-------------------------+----------------------------------+-------------------+
| 07                      | El Oro                           | 170               |
+-------------------------+----------------------------------+-------------------+
| 08                      | Esmeraldas                       | 76                |
+-------------------------+----------------------------------+-------------------+
| 09                      | Guayas                           | 432               |
+-------------------------+----------------------------------+-------------------+
| 10                      | Imbabura                         | 58                |
+-------------------------+----------------------------------+-------------------+
| 11                      | Loja                             | 70                |
+-------------------------+----------------------------------+-------------------+
| 12                      | Los Ríos                         | 110               |
+-------------------------+----------------------------------+-------------------+
| 13                      | Manabí                           | 176               |
+-------------------------+----------------------------------+-------------------+
| 14                      | Morona Santiago                  | 32                |
+-------------------------+----------------------------------+-------------------+
| 15                      | Napo                             | 26                |
+-------------------------+----------------------------------+-------------------+
| 16                      | Pastaza                          | 24                |
+-------------------------+----------------------------------+-------------------+
| 17                      | Pichincha                        | 342               |
+-------------------------+----------------------------------+-------------------+
| 18                      | Tungurahua                       | 232               |
+-------------------------+----------------------------------+-------------------+
| 19                      | Zamora Chinchipe                 | 26                |
+-------------------------+----------------------------------+-------------------+
| 20                      | Galápagos                        | 24                |
+-------------------------+----------------------------------+-------------------+
| 21                      | Sucumbíos                        | 30                |
+-------------------------+----------------------------------+-------------------+
| 22                      | Orellana                         | 28                |
+-------------------------+----------------------------------+-------------------+
| 23                      | Santo Domingo de los Tsáchilas   | 52                |
+-------------------------+----------------------------------+-------------------+
| 24                      | Santa Elena                      | 38                |
+-------------------------+----------------------------------+-------------------+
| 90                      | Zonas no delimitadas             | 24                |
+-------------------------+----------------------------------+-------------------+

:  Conglomerados por provincia {#tbl-conglomerados}

Fuente: Instituto Nacional de Estadística y Censos

En primera instancia, la selección de las UPM que forman parte de la muestra, de acuerdo con el tamaño establecido, se realiza de manera independiente en cada uno de los dominios de forma aleatoria, asignando a cada UPM igual probabilidad de ser seleccionada. De la misma forma, la selección de viviendas es aleatoria dentro de cada UPM seleccionada.

### Rotación de la muestra

Esta encuesta es de tipo panel, donde cada panel tiene una duración de dos años, el cual mide los cambios en el empleo y desempleo entre meses, trimestres y años consecutivos, así como la estacionalidad en el tiempo. Cada panel comprende siete viviendas efectivas por conglomerado o UPM, es decir, el panel y su seguimiento son a nivel de conglomerado. En la muestra existen tres viviendas de reemplazo por cada conglomerado.

La rotación de paneles tiene un sistema 2-2-2, un panel es visitado en dos trimestres consecutivos, en los siguientes dos trimestres no se realiza visitas y en los siguientes dos trimestres la segunda visita. Entre los beneficios de la rotación de paneles está la compatibilidad con un proceso de actualización cartográfico permanente, es decir, permite identificar el panel tanto para las viviendas como para el conglomerado (INEC, 2018).


```{r}
#| label: fig-rotacion
#| fig-cap: | 
#|    División político administrativa y áreas urbanas y rurales.<br>
#|    Fuente: Instituto Nacional de Estadística y Censos (INEC, 2018).
#| out-width: 12in

knitr::include_graphics("rotacion_muestra.jpg")
```



A partir del 2021, el INEC presenta resultados acumulados trimestrales y anuales. Los resultados trimestrales se generan de la acumulación de 3 meses consecutivos (trimestre 1: enero, febrero, marzo; trimestre 2: abril, mayo y junio; trimestre 3: julio, agosto y septiembre y trimestre 4: octubre, noviembre y diciembre); mientras que, los resultados anuales corresponden a la acumulación de 12 meses continuos (enero a diciembre). La ventaja de presentar resultados trimestrales y anuales permite obtener mayor representatividad de la información, respecto a los resultados mensuales. La información de mercado laboral que se obtiene de la ENEMDU acumulada trimestral tiene representatividad a nivel nacional, área y las 5 ciudades (Quito, Guayaquil, Cuenca, Ambato y Machala), y lo resultados de la ENEMDU acumulada anual, además de las desagregaciones de la acumulada trimestral, tendrá representatividad provincial.

## Aplicación del factor de expansión a los datos muestrales

El factor de expansión es un multiplicador basado en una muestra que permite transformar de datos muestrales a datos poblacionales. Este factor se calcula de acuerdo a las posibilidades de selección de los elementos de la muestra, siendo el inverso de la probabilidad de selección de los elementos. El procedimiento de ponderación se realiza igualmente en dos etapas, la primera calcula la ponderación por conglomerado o UPM y la segunda calcula una ponderación de viviendas dentro del conglomerado, aplicado un ajuste por no respuesta de ser necesario. Finalmente, la ponderación total asignada es el producto de estas dos ponderaciones (INEC, 2018).

El ajuste o calibración de los factores de expansión consiste en la creación de un componente extra en la fórmula de cálculo, para poder ajustar la población estimada por medio de la encuesta, con un dato o un parámetro conocido. En el caso de la ENEMDU, este parámetro son las proyecciones poblacionales a la fecha de realización de la encuesta.

## Consideraciones metodológicas del análisis

### Desagregaciones territoriales para el análisis

Entre las variables que incorpora la base de datos de la ENEMDU anual 2023, se encuentran algunas que permiten realizar distintas desagregaciones territoriales. Para el caso del análisis realizado se emplearon particularmente dos: i) “área” (área1=urbana y área2 =rural): que hace referencia a las zonas urbanas y rurales existentes al interior de un determinado territorio y ii) “ciudad”: que alude a la clasificación político-administrativa de las parroquias del DMQ. Es importante mencionar que la información para las parroquias urbanas del DMQ se encuentra agregadas con la codificación 170150, mientras que las parroquias rurales se encuentran desagregadas con los códigos 170151 hasta 170185.

A pesar de la desagregación existente a nivel de parroquias rurales, el análisis pierde representatividad estadística cuando se analiza de manera desagregada. Por lo anterior la forma correcta de analizar las parroquias rurales es agregándolas a una sola categoría.

En función de la explicación precedente y por como están orientadas las políticas y programas en el DMQ se presentan cuatro desagregaciones territoriales distintas, pero complementarias, para las cuales fueron calculados los indicadores.

**a)  Quito ciudad:** esta categoría es la que permite replicar los resultados publicados de manera oficial por el INEC y considera exclusivamente a las parroquias urbanas contenidas en el código 170150 y las áreas amanzanadas (área 1=urbano) dentro de la mencionada parroquia. Es decir, muestra una desagregación estrictamente urbana.

**b)  DMQ urbano:** en esta categoría se analiza la parroquia urbana 170150 contemplando las áreas urbanizadas y no urbanizadas (área 1=urbana y 2=rural, de la base de datos ENEMDU anual 2023) dentro de ese territorio.

**c)  DMQ rural:** para analizar el sector rural se tomaron en cuenta todas las parroquias rurales codificadas desde el 170151 hasta 170185 con sus respectivas áreas urbanizadas y no urbanizadas (área 1=urbana y 2=rural, de la base de datos ENEMDU anual 2023).

**d)  DMQ total:** como última categoría se analiza al DMQ total considerando todas las parroquias urbanas y rurales (para las cuales existen observaciones) y sus áreas tanto urbanizadas como no urbanizadas (área 1=urbana y 2=rural, de la base de datos ENEMDU anual 2023). Es decir, se analizan todas las observaciones recabadas para el DMQ como un todo.

Es importante aclarar que, en términos conceptuales el área urbana (que se encuentra como variable de la ENEMDU) se entiende como sectores amanzanados y el área rural como sectores dispersos.

```{r}
#| label: fig-division
#| fig-cap: División político administrativa y áreas urbanas y rurales
#| out-height: 5in
#| out-width: 5in

knitr::include_graphics("division_DMQ.png")
```


El gráfico precedente es estrictamente explicativo, dado que las dinámicas y complejidades territoriales no se encuentran divididas con tanta rigidez. Sin embargo, nos permite entender que al interior de un territorio clasificado por su división político-administrativa como urbano, puede existir áreas urbanizadas y no urbanizadas; las cuales son las áreas 1 (urbana) y 2 (rural) clasificadas en la base de datos de la ENMEDU anual 2023.

Asimismo, en las parroquias clasificadas como rurales existen estas áreas urbanizadas y no urbanizadas (área 1 y 2, de la base de datos ENEMDU anual 2023) al interior del territorio.

De ser requerido, se podría realizar el mismo análisis de indicadores con una desagregación territorial diferente. Por ejemplo, podría no considerarse la división político-administrativa de las parroquias y analizar la base exclusivamente por áreas urbanas y rurales. Lo anterior dependerá del uso que se de a los datos y de las necesidades propias de los analistas e investigadores.

### Valores en blanco

Para el cálculo de cada uno de los indicadores considerados en el análisis se excluye la categoría de datos en blanco o varios; es decir, no se consideran como una subcategoría más, no se obtienen sus porcentajes y por consecuencia son restados de los valores totales de cada indicador.

### Información sobre niveles de empleo

En la base de datos que se adjunta a esta nota metodológica, los indicadores de mercado laboral efectivamente calculados se los encuentra en la pestaña denominada “Condición de actividad” (PET, PEA, PEI, tasa de empleo global). Las pestañas denominadas “PET”, “PEA” y “PEI”, contienen valores brutos que no necesariamente reflejan el cálculo del indicador. En este sentido para revisar los datos de empleo remitirse a Condición de actividad.

### Representatividad del análisis

Como se explicó en la sección 2 del presente documento, Quito efectivamente es una de las ciudades auto representadas para las cuales la muestra obtenida por la ENEMDU es estadísticamente significativa. Por lo anterior, se garantiza la validez de los datos en las 4 desagregaciones territoriales presentadas. Adicionalmente, se advierte que el análisis de las parroquias rurales no puede ser realizado desagregando las mismas, sino como un solo grupo correspondiente a “parroquias rurales” puesto que, por como está distribuida la muestra, se perdería representatividad si se analizan las parroquias rurales por separado.

## Limitaciones del análisis

El diseño muestral de la ENEMDU no garantiza a priori una mayor subdivisión de grupos, más allá de los dominios de estudio previamente establecidos. De manera que es fundamental verificar la validez estadística de las estimaciones que se obtengan previo a realizar análisis y conclusiones sobre grupos específicos del universo de estudio. Para el caso de los indicadores obtenidos en este análisis, se ha verificado la validez de la desagregación territorial, los filtros realizados entre variables y las agrupaciones analizadas.

La ENEMDU permite realizar análisis descriptivos con los resultados de cada trimestre, semestre o año; así como también análisis comparativos respecto a los resultados de las mismas periodicidades, pero anteriores. Los principales resultados se encuentran en los productos estadísticos oficiales de la encuesta (informes y documentos de resultados de la ENEMDU oficiales publicados por el INEC). Es necesaria una evaluación preliminar de la precisión y exactitud de las estimaciones que se obtengan de la encuesta. Para asegurar que los datos fueron correctamente analizados, se replicaron los tabulados de la ENEMDU tanto en indicadores de empleo como en pobreza a través de la desagregación “Quito Ciudad”, logrando el proceso exitosamente.

Por otro lado, es importante considerar que la encuesta en sí misma y los procesos estadísticos y metodológicos que contiene pueden presentar un error relativo (coeficiente de variación), el cual mide la magnitud de la variabilidad de la distribución muestral.

Finalmente, en términos generales la ENEMDU es efectivamente representativa a nivel nacional en áreas urbanas y rurales y para las cinco ciudades auto representadas; entre las cuales se encuentra Quito. Sin embargo, el nivel de confianza y representatividad puede variar en el caso de las poblaciones muestrales a nivel rural. Por lo anterior y con la finalidad de que los resultados obtenidos tengan significancia estadística, las parroquias rurales han sido agregadas para entregar un solo resultado total.

## Conceptos generales

La Población en edad de trabajar (PET) comprende a toda la población que es mayor o igual a 15 años, mientras que la PEA son todas las personas de 15 años y más que trabajaron al menos una hora en la semana de referencia o, aunque no trabajaron, tuvieron trabajo (ocupados), o bien aquellas personas que no tenían empleo, pero estaban disponibles para trabajar y buscan empleo (desempleados). La PEA contiene al empleo adecuado, al subempleo por insuficiencia de tiempo de trabajo, al subempleo por insuficiencia de ingresos, a otro empleo no pleno, a empleo no remunerado, a empleo no clasificado, al desempleo abierto y al desempleo oculto.

Por otro lado, la PEI considera todas las personas inactivas de 15 años y más, no clasificadas como personas con empleo (ocupadas) o desempleadas (desocupados) durante la semana de referencia, como: rentistas, jubilados, pensionistas, estudiantes, amas de casa, entre otros son personas que están fuera de la edad de trabajo o personas que no están buscando empleo. La sumatoria de la PEA y la PEI conforman la PET (Ver Figura 2) (INEC, 2018).

```{r}
#| label: fig-clasificacion_empleo
#| echo: false
#| fig-cap: Clasificación variables de empleo
#| out-width: 6in
#| out-height: 4in
knitr::include_graphics("empleo.png")
```


## Conclusiones y recomendaciones

- La ENEMDU es un instrumento estadístico fundamental para el estudio de la situación del empleo en Ecuador, ya que proporciona información detallada sobre la actividad económica, las fuentes de ingreso de la población y las tendencias en la PEA, PEI, empleo, subempleo y desempleo a nivel nacional.

- El diseño muestral de la ENEMDU, con su enfoque en paneles de dos años de duración y su sistema de rotación 2-2-2, permite un seguimiento longitudinal de los cambios en el empleo y desempleo, así como la identificación de patrones estacionales. Esto lo convierte en una herramienta valiosa para el análisis de la dinámica del mercado laboral ecuatoriano.

- Es importante tomar en cuenta las limitaciones metodológicas y en términos de representatividad que puede tener esta herramienta en función de los indicadores que se requieran calcular y las áreas geográficas para las cuales se requiere extraer información. Para los indicadores calculados y generados que acompañan este documento, se garantiza la representatividad para las cuatro desagregaciones territoriales que han sido analizadas.



```{r}
#| echo: false
#| warning: false
#| message: false


# La página ofical de Enemdu: https://www.ecuadorencifras.gob.ec/enemdu-anual/

# En este caso vamos a usar datos anuales

# Instalar paquetes en caso que no esten ya instalados
if (!require(tidyverse) && !require(utils) && !require(purrr) && !require(kableExtra) && !require(DT)) {
  install.packages(c("tidyverse", "utils", "purrr", "kableExtra", "DT"))
}

# Cargar los paquetes necesarios

packages <- c("tidyverse", "utils", "purrr", "kableExtra", "DT")
loaded_packages <- lapply(packages, library, character.only = TRUE)

# Este es link de la base de datos anual de Enemdu:
temp_zip <- tempfile()
download.file("https://www.ecuadorencifras.gob.ec/documentos/web-inec/EMPLEO/2023/anual/2_BDD_DATOS_ABIERTOS_ENEMDU_2023_CSV.zip", temp_zip)

# Extraemos el archivos csv que nos insteresa que es el de personas
personas_2023 <- read.csv2(unz(temp_zip, "BDDenemdu_personas_2023_anual.csv"))
  
# primero, filtramos el DMQ, Quito urbano, rural y Quito ciudad

DMQ_ciudad <- personas_2023 |> filter(ciudad == "170150" & area == 1)
DMQ_urbano_2023 <- personas_2023 |> filter(ciudad == "170150") 
DMQ_rural_2023 <- personas_2023 |> filter(str_starts(ciudad, "1701") & ciudad != "170150") 
DMQ_2023 <- personas_2023 |> filter(str_starts(ciudad, "1701")) 

# Definir los límites de los grupos etarios
limites_edades <- c(0, 14, 24, 34, 44, 64, Inf)


# Clasificamos los grupos etarios por zona rural, urbana y total DMQ
DMQ_2023 <- DMQ_2023 |> 
  mutate(grupos_etarios = cut(p03,
                              breaks = limites_edades,
                              labels = c("0-14", "15-24", "25-34", "35-44", "45-64","65+"),
                              include.lowest = TRUE)) |>
  select(area, ciudad, grupos_etarios, everything())

DMQ_rural_2023 <- DMQ_rural_2023 |> 
  mutate(grupos_etarios = cut(p03,
                              breaks = limites_edades,
                              labels = c("0-14", "15-24", "25-34", "35-44", "45-64","65+"),
                              include.lowest = TRUE)) |>
  select(area, ciudad, grupos_etarios, everything())

DMQ_urbano_2023 <- DMQ_urbano_2023 |> 
  mutate(grupos_etarios = cut(p03,
                              breaks = limites_edades,
                              labels = c("0-14", "15-24", "25-34", "35-44", "45-64","65+"),
                              include.lowest = TRUE)) |>
  select(area, ciudad, grupos_etarios, everything())

DMQ_ciudad <- DMQ_ciudad |> 
  mutate(grupos_etarios = cut(p03,
                              breaks = limites_edades,
                              labels = c("0-14", "15-24", "25-34", "35-44", "45-64","65+"),
                              include.lowest = TRUE)) |>
  select(area, ciudad, grupos_etarios, everything())

```

::: callout-note
Mayor información sobre la ENEMDU, sus bases de datos, así como la metodología, guía y sintaxis de variables, se puede encontrar [aquí](https://www.ecuadorencifras.gob.ec/enemdu-anual/)
:::

# Indicadores de la Encuesta Nacional de Empleo, Desempleo y Subempleo para el Distrito Metropolitano de Quito

## Autoidentificación Étnica por sexo

```{r}
#| echo: false
#| warning: false
#| message: false

# Calcular el total de personas por sexo y etnia con el factor de expansión,
# tanto zona urbana, como rural y el total DMQ

total_etnia_ciudad <- DMQ_ciudad |>
  group_by(p15) |>
  filter(!is.na(p15))|>
  summarise(total_personas = sum(fexp), na.rm =T) |>
  mutate(Porcentaje_personas = total_personas / sum(total_personas) * 100, na.rm = T) |>
  arrange(desc(Porcentaje_personas)) |>
  mutate(etnia = p15) |>
  na.omit() |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a'
                        )) |>
  select(-p15)|>
  select(etnia,total_personas, Porcentaje_personas) 
  

total_etnia_DMQ <- DMQ_2023 |>
  group_by(p15) |>
  filter(!is.na(p15))|>
  summarise(total_personas = sum(fexp), na.rm =T) |>
  mutate(Porcentaje_personas = total_personas / sum(total_personas) * 100, na.rm = T) |>
  arrange(desc(Porcentaje_personas)) |>
  mutate(etnia = p15) |>
  na.omit() |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a'
                        )) |>
  select(-p15)|>
  select(etnia,total_personas, Porcentaje_personas) 
  


total_etnia_urbano_DMQ <- DMQ_urbano_2023 |>
  filter(!is.na(p15))|>
  group_by(p15) |>
  summarise(total_personas = sum(fexp, na.rm =T))  |>
  ungroup() |>
  mutate(Porcentaje_personas = total_personas / sum(total_personas, na.rm = T) * 100) |>
  
  arrange(desc(Porcentaje_personas))|>
  mutate(etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a'
                        )) |>
  select(-p15)|>
  select(etnia,total_personas, Porcentaje_personas) |>
  na.omit()

total_etnia_rural_DMQ <- DMQ_rural_2023 |>
  group_by(p15) |>
  filter(!is.na(p15))|>
  summarise(total_personas = sum(fexp), na.rm =T)  |>
  mutate(Porcentaje_personas = total_personas / sum(total_personas) * 100, na.rm = T) |>
  arrange(desc(Porcentaje_personas)) |>
  mutate(etnia = p15) |>
  na.omit() |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a'
                        )) |>
  select(-p15)|>
  select(etnia,total_personas, Porcentaje_personas) |>
  na.omit()


# Totales por etnia y sexo

total_por_sexo_etnia_ciudad <- DMQ_ciudad |>
  group_by(p15, p02) |>
  filter(!is.na(p15))|>
  na.omit() |>
  summarise(total_personas = sum(fexp), na.rm =T) |>
  ungroup()

total_por_sexo_etnia <- DMQ_2023 |>
  group_by(p15, p02) |>
  filter(!is.na(p15))|>
  na.omit() |>
  summarise(total_personas = sum(fexp), na.rm =T) |>
  ungroup()

total_por_sexo_etnia_rural_DMQ <- DMQ_rural_2023 |>
  group_by(p15, p02) |>
  filter(!is.na(p15))|>
  na.omit() |>
  summarise(total_personas = sum(fexp), na.rm =T) |>
  ungroup()

total_por_sexo_etnia_urbano_DMQ <- DMQ_urbano_2023 |>
  group_by(p15, p02) |>
  filter(!is.na(p15))|>
  na.omit() |>
  summarise(total_personas = sum(fexp), na.rm =T) |>
  ungroup()


# Calculamos el conteo de individuos por sexo y grupo etario
grupos_et_sexo_ciudad <- DMQ_ciudad |>
  filter(!is.na(p15))|>
  group_by(p02, grupos_etarios, p15) |>
  summarise(num_personas = sum(fexp), na.rm =T) |>
  ungroup()

grupos_et_sexo_DMQ <- DMQ_2023 |>
  filter(!is.na(p15))|>
  group_by(p02, grupos_etarios, p15) |>
  summarise(num_personas = sum(fexp), na.rm =T) |>
  ungroup()

grupos_et_sexo_rural_DMQ <- DMQ_rural_2023 |>
  filter(!is.na(p15))|>
  group_by(p02, grupos_etarios, p15) |>
  summarise(num_personas = sum(fexp), na.rm =T) |>
  ungroup()

grupos_et_sexo_urbano_DMQ <- DMQ_urbano_2023 |>
  group_by(p02, grupos_etarios, p15) |>
  filter(!is.na(p15))|>
  summarise(num_personas = sum(fexp), na.rm =T) |>
  ungroup()


# Calcular el porcentaje de población por sexo, etnia y grupo etario. 
# Por zona urbana, rural y total DMQ
resumen_poblacion_ciudad <- grupos_et_sexo_ciudad |>
  left_join(total_por_sexo_etnia, by = c("p02", "p15")) |>
  mutate(porcentaje = (num_personas / total_personas) *100, na.rm = T)

resumen_poblacion_DMQ <- grupos_et_sexo_DMQ |>
  left_join(total_por_sexo_etnia, by = c("p02", "p15")) |>
  mutate(porcentaje = (num_personas / total_personas) *100, na.rm = T)

resumen_poblacion_rural_DMQ <- grupos_et_sexo_rural_DMQ |>
  left_join(total_por_sexo_etnia, by = c("p02", "p15")) |>
  mutate(porcentaje = (num_personas / total_personas)*100, na.rm = T )

resumen_poblacion_urbano_DMQ <- grupos_et_sexo_urbano_DMQ |>
  left_join(total_por_sexo_etnia, by = c("p02", "p15")) |>
  mutate(porcentaje = (num_personas / total_personas)*100, na.rm = T )

# cambiar los nombres de las variables y sus categorías
resumen_poblacion_ciudad <- resumen_poblacion_ciudad |>
  mutate(sexo = p02,
         etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a'
                        ) ,
         sexo = recode(sexo,
                       `1` = 'Hombres',
                       `2` = 'Mujeres'))


resumen_poblacion_DMQ <- resumen_poblacion_DMQ |>
  mutate(sexo = p02,
         etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a'
                        ) ,
         sexo = recode(sexo,
                       `1` = 'Hombres',
                       `2` = 'Mujeres'))

resumen_poblacion_urbano_DMQ <- resumen_poblacion_urbano_DMQ |>
  mutate(sexo = p02,
         etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a'
  ) ,
  sexo = recode(sexo,
                `1` = 'Hombres',
                `2` = 'Mujeres'))

resumen_poblacion_rural_DMQ <- resumen_poblacion_rural_DMQ |>
  mutate(sexo = p02,
         etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a'
  ) ,
  sexo = recode(sexo,
                `1` = 'Hombres',
                `2` = 'Mujeres'))

##### Calculamos los totales y porcentajes por etnia y sexo

resumen_poblacion_ciudad <- resumen_poblacion_ciudad |>
  group_by(etnia, sexo) |>
  summarise(
    Cantidad = sum(num_personas),
    .groups = 'drop', na.rm =T
  ) |>
  mutate(
    Porcentaje = Cantidad / sum(Cantidad) *100, na.rm = T
  )

resumen_poblacion_DMQ <- resumen_poblacion_DMQ |>
  group_by(etnia, sexo) |>
  summarise(
    Cantidad = sum(num_personas),
    .groups = 'drop', na.rm =T
  ) |>
  mutate(
    Porcentaje = Cantidad / sum(Cantidad) *100, na.rm = T
  )

resumen_poblacion_urbano_DMQ <- resumen_poblacion_urbano_DMQ |>
  group_by(etnia, sexo) |>
  summarise(
    Cantidad = sum(num_personas),
    .groups = 'drop', na.rm =T
  ) |>
  mutate(
    Porcentaje = Cantidad / sum(Cantidad) *100, na.rm = T
  )

resumen_poblacion_rural_DMQ <- resumen_poblacion_rural_DMQ |>
  group_by(etnia, sexo) |>
  summarise(
    Cantidad = sum(num_personas),
    .groups = 'drop', na.rm =T
  ) |>
  mutate(
    Porcentaje = Cantidad / sum(Cantidad) * 100, na.rm = T
  ) 



# Ahora expandimos la variable 'sexo' en columnas separadas

resumen_poblacion_wide_ciudad <- resumen_poblacion_ciudad |>
  pivot_wider(
    names_from = sexo,
    values_from = c(Cantidad, Porcentaje),
    names_sep = "_"
  )

resumen_poblacion_wide_urbano_DMQ <- resumen_poblacion_urbano_DMQ |>
  pivot_wider(
    names_from = sexo,
    values_from = c(Cantidad, Porcentaje),
    names_sep = "_"
  )

resumen_poblacion_wide_rural_DMQ <- resumen_poblacion_rural_DMQ |>
  pivot_wider(
    names_from = sexo,
    values_from = c(Cantidad, Porcentaje),
    names_sep = "_"
  )

resumen_poblacion_wide_DMQ <- resumen_poblacion_DMQ |>
  pivot_wider(
    names_from = sexo,
    values_from = c(Cantidad, Porcentaje),
    names_sep = "_"
  )

### Crear las tablas html

# unimos tablas con los datos de Quito ciudad
resumen_poblacion_wide_ciudad <- resumen_poblacion_wide_ciudad |>
  left_join(total_etnia_urbano_DMQ, by = "etnia")|>
  select(etnia, total_personas, Porcentaje_personas, Cantidad_Mujeres, Porcentaje_Mujeres, Cantidad_Hombres, Porcentaje_Hombres) |> 
  arrange(desc(Porcentaje_personas)) |> 
  na.omit() |>
  mutate(`Cómo se considera` = etnia,
          `Cantidad P` = `total_personas`,
          `Porcentaje P` = `Porcentaje_personas`,
         `Cantidad M` = `Cantidad_Mujeres`,
         `Porcentaje M` = `Porcentaje_Mujeres`,
         `Cantidad H` = `Cantidad_Hombres`,
         `Porcentaje H` = `Porcentaje_Hombres`) |>
  select(`Cómo se considera`,`Cantidad P`,`Porcentaje P`, `Cantidad M`,`Porcentaje M` ,
         `Cantidad H`,`Porcentaje H`) 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- resumen_poblacion_wide_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
resumen_poblacion_wide_ciudad <- bind_rows(resumen_poblacion_wide_ciudad, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))


# primero unimos las tablas de DMQ urbano

resumen_poblacion_wide_urbano_DMQ <- resumen_poblacion_wide_urbano_DMQ |>
  left_join(total_etnia_urbano_DMQ, by = "etnia")|>
  select(etnia, total_personas, Porcentaje_personas, Cantidad_Mujeres, Porcentaje_Mujeres, Cantidad_Hombres, Porcentaje_Hombres) |> 
  arrange(desc(Porcentaje_personas)) |> 
  na.omit() |>
  mutate(`Cómo se considera` = etnia,
          `Cantidad P` = `total_personas`,
          `Porcentaje P` = `Porcentaje_personas`,
         `Cantidad M` = `Cantidad_Mujeres`,
         `Porcentaje M` = `Porcentaje_Mujeres`,
         `Cantidad H` = `Cantidad_Hombres`,
         `Porcentaje H` = `Porcentaje_Hombres`) |>
  select(`Cómo se considera`,`Cantidad P`,`Porcentaje P`, `Cantidad M`,`Porcentaje M` ,
         `Cantidad H`,`Porcentaje H`) 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- resumen_poblacion_wide_urbano_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
resumen_poblacion_wide_urbano_DMQ <- bind_rows(resumen_poblacion_wide_urbano_DMQ, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# unimos tablas del DMQ rural
resumen_poblacion_wide_rural_DMQ <- resumen_poblacion_wide_rural_DMQ |>
  left_join(total_etnia_urbano_DMQ, by = "etnia")|>
  select(etnia, total_personas, Porcentaje_personas, Cantidad_Mujeres, Porcentaje_Mujeres, Cantidad_Hombres, Porcentaje_Hombres) |> 
  arrange(desc(Porcentaje_personas))|> 
  na.omit() |>
  mutate(`Cómo se considera` = etnia,
          `Cantidad P` = `total_personas`,
          `Porcentaje P` = `Porcentaje_personas`,
         `Cantidad M` = `Cantidad_Mujeres`,
         `Porcentaje M` = `Porcentaje_Mujeres`,
         `Cantidad H` = `Cantidad_Hombres`,
         `Porcentaje H` = `Porcentaje_Hombres`) |>
  select(`Cómo se considera`,`Cantidad P`,`Porcentaje P`, `Cantidad M`,`Porcentaje M` ,
         `Cantidad H`,`Porcentaje H`) 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- resumen_poblacion_wide_rural_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
resumen_poblacion_wide_rural_DMQ <- bind_rows(resumen_poblacion_wide_rural_DMQ, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# unimos tablas del DMQ total
resumen_poblacion_wide_DMQ <- resumen_poblacion_wide_DMQ |>
  left_join(total_etnia_urbano_DMQ, by = "etnia")|>
  select(etnia, total_personas, Porcentaje_personas, Cantidad_Mujeres, Porcentaje_Mujeres, Cantidad_Hombres, Porcentaje_Hombres) |> 
  arrange(desc(Porcentaje_personas))|> 
  na.omit() |>
  mutate(`Cómo se considera` = etnia,
          `Cantidad P` = `total_personas`,
          `Porcentaje P` = `Porcentaje_personas`,
         `Cantidad M` = `Cantidad_Mujeres`,
         `Porcentaje M` = `Porcentaje_Mujeres`,
         `Cantidad H` = `Cantidad_Hombres`,
         `Porcentaje H` = `Porcentaje_Hombres`) |>
  select(`Cómo se considera`,`Cantidad P`,`Porcentaje P`, `Cantidad M`,`Porcentaje M` ,
         `Cantidad H`,`Porcentaje H`) 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- resumen_poblacion_wide_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
resumen_poblacion_wide_DMQ <- bind_rows(resumen_poblacion_wide_DMQ, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))
  

#### tablas para desplegar


#  Quito ciudad
resumen_poblacion_wide_ciudad <- kable(resumen_poblacion_wide_urbano_DMQ,
     caption = "Autoindentificación étnica - Quito Ciudad",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(resumen_poblacion_wide_urbano_DMQ), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO CIUDAD" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 
# DMQ Urbano
poblacion_wide_urbano_DMQ <- kable(resumen_poblacion_wide_urbano_DMQ,
     caption = "Autoindentificación étnica - DMQ urbano",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(resumen_poblacion_wide_urbano_DMQ), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO URBANO" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# DMQ rural
poblacion_wide_rural_DMQ <- kable(resumen_poblacion_wide_rural_DMQ,
     caption = "Autoindentificación étnica - DMQ rural",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(resumen_poblacion_wide_rural_DMQ), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO RURAL" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# todo DMQ
poblacion_wide_DMQ <- kable(resumen_poblacion_wide_DMQ,
     caption = "Autoindentificación étnica - DMQ total",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(resumen_poblacion_wide_DMQ), bold = TRUE) |>
  add_header_above(c(" " =1, "TOTAL DMQ" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

resumen_poblacion_wide_ciudad
poblacion_wide_DMQ
poblacion_wide_urbano_DMQ
poblacion_wide_rural_DMQ

```

::: aside
```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 6
#| column: margin
#| eval: false


library(ggplot2)
library(treemapify)

porcentajes_etnia <- ggplot(total_etnia_DMQ, 
       aes(area = Porcentaje_personas, 
                            fill = etnia, 
                            label = sprintf("%.2f%%", Porcentaje_personas))) +
  geom_treemap() +
  geom_treemap_text(colour = "white", place = "centre", grow = TRUE) +
  theme_minimal() +
  labs(title = "Autoidentificación étnica total DMQ", fill = "Etnia")
porcentajes_etnia
```
:::

### Autoidentificación étnica por grupos etarios

```{r}
#| echo: false
#| warning: false
#| message: false
#| eval: true

#####  Por etnia y grupos etarios

DMQ_grupos_ciudad <- DMQ_ciudad |>
  filter(!is.na(p15))|>
  group_by(p15, grupos_etarios) |>
  summarise(totales = sum(fexp))

DMQ_grupos_urbano_DMQ <- DMQ_urbano_2023 |>
  filter(!is.na(p15))|>
  group_by(p15, grupos_etarios) |>
  summarise(totales = sum(fexp))

DMQ_grupos_rural_DMQ <- DMQ_rural_2023 |>
  filter(!is.na(p15))|>
  group_by(p15, grupos_etarios) |>
  summarise(totales = sum(fexp))

DMQ_grupos_DMQ <- DMQ_2023 |>
  filter(!is.na(p15))|>
  group_by(p15, grupos_etarios) |>
  summarise(totales = sum(fexp))

# Expandir horizontalmente la tabla

DMQ_grupos_ciudad <- DMQ_grupos_ciudad |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(totales),
    names_sep = "_"
  )

DMQ_grupos_urbano_DMQ <- DMQ_grupos_urbano_DMQ |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(totales),
    names_sep = "_"
  )

DMQ_grupos_rural_DMQ <- DMQ_grupos_rural_DMQ |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(totales),
    names_sep = "_"
  )

DMQ_grupos_DMQ <- DMQ_grupos_DMQ |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(totales),
    names_sep = "_"
  )

#  Cambiar de nombres a las categorías de etnia

# DMQ ciudad
DMQ_grupos_ciudad <- DMQ_grupos_ciudad |>
  mutate(etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a')) |>
  mutate(`Cómo se considera` = etnia) |>
  select(`Cómo se considera`, everything(), -etnia)|>
  mutate(across(everything(), ~replace_na(., 0)))

DMQ_grupos_ciudad <- DMQ_grupos_ciudad[,-2]

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_ciudad <- bind_rows(DMQ_grupos_ciudad, sumas) 

DMQ_grupos_ciudad <- DMQ_grupos_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm=T)) |>
  ungroup() |>
  mutate(`Porcentaje` = (`Total general` / sum(`Total general`[1:8])) * 100) |>
  mutate(Total = if_else(`Cómo se considera` == "Total", TRUE, FALSE)) |>
  arrange(Total, desc(`Total general`)) |>
  select(-Total) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  

# DMQ Urbano
DMQ_grupos_urbano_DMQ <- DMQ_grupos_urbano_DMQ |>
  mutate(etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a')) |>
  mutate(`Cómo se considera` = etnia) |>
  select(`Cómo se considera`, everything(), -etnia)|>
  mutate(across(everything(), ~replace_na(., 0)))

DMQ_grupos_urbano_DMQ <- DMQ_grupos_urbano_DMQ[,-2]

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_urbano_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_urbano_DMQ <- bind_rows(DMQ_grupos_urbano_DMQ, sumas)

DMQ_grupos_urbano_DMQ <- DMQ_grupos_urbano_DMQ |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm=T)) |>
  ungroup() |>
  mutate(`Porcentaje` = (`Total general` / sum(`Total general`[1:8])) * 100) |>
  mutate(Total = if_else(`Cómo se considera` == "Total", TRUE, FALSE)) |>
  arrange(Total, desc(`Total general`)) |>
  select(-Total) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  

# DMQ rural
DMQ_grupos_rural_DMQ <- DMQ_grupos_rural_DMQ |>
  mutate(etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a')) |>
  mutate(`Cómo se considera` = etnia) |>
  select(`Cómo se considera`, everything(), -etnia)|>
  mutate(across(everything(), ~replace_na(., 0)))

DMQ_grupos_rural_DMQ <- DMQ_grupos_rural_DMQ[,-2]


# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_rural_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_rural_DMQ <- bind_rows(DMQ_grupos_rural_DMQ, sumas)

DMQ_grupos_rural_DMQ <- DMQ_grupos_rural_DMQ |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm=T)) |>
  ungroup() |>
  mutate(`Porcentaje` = (`Total general` / sum(`Total general`[1:8])) * 100) |>
  mutate(Total = if_else(`Cómo se considera` == "Total", TRUE, FALSE)) |>
  arrange(Total, desc(`Total general`)) |>
  select(-Total) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  

# DMQ total
DMQ_grupos_DMQ <- DMQ_grupos_DMQ |>
  mutate(etnia = p15) |>
  mutate(etnia = recode(etnia,
                        `1` = 'Indígena',
                        `2` = 'Afroecuatoriano/a',
                        `3` = 'Negro/a',
                        `4` = 'Multato/a',
                        `5` = 'Montubio/a',
                        `6` = 'Mestizo/a',
                        `7` = 'Blanco/a',
                        `8` = 'Otro/a')) |>
  mutate(`Cómo se considera` = etnia) |>
  select(`Cómo se considera`, everything(), -etnia)|>
  mutate(across(everything(), ~replace_na(., 0)))

DMQ_grupos_DMQ <- DMQ_grupos_DMQ[,-2]

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_DMQ <- bind_rows(DMQ_grupos_DMQ, sumas) 

DMQ_grupos_DMQ <- DMQ_grupos_DMQ |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm=T)) |>
  ungroup() |>
  mutate(`Porcentaje` = (`Total general` / sum(`Total general`[1:8])) * 100) |>
  mutate(Total = if_else(`Cómo se considera` == "Total", TRUE, FALSE)) |>
  arrange(Total, desc(`Total general`)) |>
  select(-Total) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  

#### Formateamos la tabla para el documento

#  Quito ciudad

grupos_ciudad <- 
   kable(DMQ_grupos_ciudad,
        format.args = list(decimal.mark = ",", big.mark = "."),
        format = "html",
        digits = 2,
        group.size = 3) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_grupos_ciudad), bold = TRUE) |>
  add_header_above(c(" " = 1, "AUTOIDENTIFICACIÓN ÉTNICA POR GRUPO ETARIO - QUITO CIUDAD" = 8))

# DMQ urbano
grupos_urbano <- 
   kable(DMQ_grupos_urbano_DMQ,
        format.args = list(decimal.mark = ",", big.mark = "."),
        format = "html",
        digits = 2,
        group.size = 3) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_grupos_urbano_DMQ), bold = TRUE) |>
  add_header_above(c(" " = 1, "AUTOIDENTIFICACIÓN ÉTNICA POR GRUPO ETARIO - DMQ URBANO" = 8))

# DMQ rural
grupos_rural <- 
   kable(DMQ_grupos_rural_DMQ,
        format.args = list(decimal.mark = ",", big.mark = "."),
        format = "html",
        digits = 2,
        group.size = 3) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_grupos_rural_DMQ), bold = TRUE) |>
  add_header_above(c(" " = 1, "AUTOIDENTIFICACIÓN ÉTNICA POR GRUPO ETARIO - DMQ RURAL" = 8))

# DMQ total
grupos_DMQ <- 
   kable(DMQ_grupos_DMQ,
        format.args = list(decimal.mark = ",", big.mark = "."),
        format = "html",
        digits = 2,
        group.size = 3) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_grupos_DMQ), bold = TRUE) |>
  add_header_above(c(" " = 1, "AUTOIDENTIFICACIÓN ÉTNICA POR GRUPO ETARIO - ZONA DMQ" = 8))

grupos_ciudad
grupos_DMQ
grupos_urbano
grupos_rural

```

## Estado civil

```{r}
#| echo: false
#| message: false
#| warning: false

# Estado civil por sexo y total

# DMQ ciudad
DMQ_estado_civil_ciudad <- DMQ_ciudad |>
  filter(!is.na(p06)) |>
  group_by(p02, p06) |>
  summarise(totales = sum(fexp, na.rm = T))|>
  ungroup()|>
  mutate(
    Porcentaje = (totales / sum(totales, na.rm = T)) * 100)



DMQ_estado_civil_ciudad_total <- DMQ_ciudad |>
  filter(!is.na(p06)) |>
  group_by(p06) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_estado_civil_ciudad <- DMQ_estado_civil_ciudad |>
  left_join(DMQ_estado_civil_ciudad_total, by = "p06")

# DMQ urbano
DMQ_estado_civil_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(p06)) |>
  group_by(p02, p06) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100) 

DMQ_estado_civil_urbano_total <- DMQ_urbano_2023 |>
  filter(!is.na(p06)) |>
  group_by(p06) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)


DMQ_estado_civil_urbano <- DMQ_estado_civil_urbano |>
  left_join(DMQ_estado_civil_urbano_total, by = "p06")

# DMQ rural

DMQ_estado_civil_rural <- DMQ_rural_2023 |>
  group_by(p02, p06) |>
  filter(!is.na(p06)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_estado_civil_rural_total <- DMQ_rural_2023 |>
  group_by(p06) |>
  filter(!is.na(p06)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_estado_civil_rural <- DMQ_estado_civil_rural |>
  left_join(DMQ_estado_civil_rural_total, by = "p06")

# DMQ total
DMQ_estado_civil <- DMQ_2023 |>
  group_by(p02, p06) |>
  filter(!is.na(p06)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_estado_civil_total <- DMQ_2023 |>
  group_by(p06) |>
  filter(!is.na(p06)) |>
  summarise(totales = sum(fexp)) |>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_estado_civil <- DMQ_estado_civil |>
  left_join(DMQ_estado_civil_total, by = "p06")


# Expandir horizontalmente las variables para una mejor lectura

# DMQ ciudad
DMQ_estado_civil_ciudad <- DMQ_estado_civil_ciudad |>
  pivot_wider(
  names_from = p02,
  values_from = c(starts_with("totales"),starts_with("Porcentaje")),
  names_sep = "_"
)

#  DMQ Urbano
DMQ_estado_civil_urbano <- DMQ_estado_civil_urbano |>
  pivot_wider(
  names_from = p02,
  values_from = c(starts_with("totales"),starts_with("Porcentaje")),
  names_sep = "_"
)

# DmQ rural
DMQ_estado_civil_rural <- DMQ_estado_civil_rural |>
  pivot_wider(
    names_from = p02,
    values_from = c(starts_with("totales"),starts_with("Porcentaje")),
    names_sep = "_"
  )

# DMQ total
DMQ_estado_civil  <- DMQ_estado_civil |>
  pivot_wider(
    names_from = p02,
    values_from = c(starts_with("totales"),starts_with("Porcentaje")),
    names_sep = "_"
  )

#  Cambiar nombres y etiquetas de categorías

# DMQ ciudad
DMQ_estado_civil_ciudad <- DMQ_estado_civil_ciudad |>
  mutate('Estado civil' = p06) |>
  mutate('Estado civil' = recode(`Estado civil`,
                                 `1` = 'Casado/a',
                                 `2` = 'Separado/a',
                                 `3` = 'Divorciado/a',
                                 `4` = 'Viudo/a',
                                 `5` = 'Unión libre',
                                 `6` = 'Soltero/a')) |>
  select(-p06) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Estado civil`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))

# DMQ urbano
DMQ_estado_civil_urbano <- DMQ_estado_civil_urbano |>
  mutate('Estado civil' = p06) |>
  mutate('Estado civil' = recode(`Estado civil`,
                                 `1` = 'Casado/a',
                                 `2` = 'Separado/a',
                                 `3` = 'Divorciado/a',
                                 `4` = 'Viudo/a',
                                 `5` = 'Unión libre',
                                 `6` = 'Soltero/a')) |>
  select(-p06) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Estado civil`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))

# DMQ rural
DMQ_estado_civil_rural <- DMQ_estado_civil_rural |>
  mutate('Estado civil' = p06) |>
  mutate('Estado civil' = recode(`Estado civil`,
                                 `1` = 'Casado/a',
                                 `2` = 'Separado/a',
                                 `3` = 'Divorciado/a',
                                 `4` = 'Viudo/a',
                                 `5` = 'Unión libre',
                                 `6` = 'Soltero/a')) |>
  select(-p06) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Estado civil`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))

#  DMQ total
DMQ_estado_civil <- DMQ_estado_civil |>
  mutate('Estado civil' = p06) |>
  mutate('Estado civil' = recode(`Estado civil`,
                                 `1` = 'Casado/a',
                                 `2` = 'Separado/a',
                                 `3` = 'Divorciado/a',
                                 `4` = 'Viudo/a',
                                 `5` = 'Unión libre',
                                 `6` = 'Soltero/a'))|>
  select(-p06) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Estado civil`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))


# Formatear tablas de estado civil por sexo para imprimir en documento

# DMQ ciudad

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_estado_civil_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_estado_civil_ciudad <- bind_rows(DMQ_estado_civil_ciudad, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ urbano

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_estado_civil_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_estado_civil_urbano <- bind_rows(DMQ_estado_civil_urbano, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ rural

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_estado_civil_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_estado_civil_rural <- bind_rows(DMQ_estado_civil_rural, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ total

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_estado_civil |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_estado_civil <- bind_rows(DMQ_estado_civil, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# Imprimimos las tres tablas de estado civil por sexo


#  Quito ciudad
estado_civil_ciudad <- kable(DMQ_estado_civil_ciudad,
     caption = "Estado civil - DMQ Ciudad",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_estado_civil_ciudad), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO CIUDAD" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 
# DMQ Urbano
estado_civil_urbano <- kable(DMQ_estado_civil_urbano,
     caption = "Estado civil - DMQ urbano",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_estado_civil_urbano), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO URBANO" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# DMQ rural
estado_civil_rural <- kable(DMQ_estado_civil_rural,
     caption = "Estado civil - DMQ rural",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_estado_civil_rural), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO RURAL" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# todo DMQ
estado_civil_todo_DMQ <- kable(DMQ_estado_civil,
     caption = "Estado civil - Zona DMQ",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_estado_civil), bold = TRUE) |>
  add_header_above(c(" " =1, "TOTAL DMQ" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

estado_civil_ciudad
estado_civil_todo_DMQ
estado_civil_urbano
estado_civil_rural
```

### Estado civil por grupos etarios

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page


#########  Estado civil por grupos etarios    ########

DMQ_estado_civil_grupos_ciudad <- DMQ_ciudad |>
  filter(!is.na(p06)) |>
  group_by(p06, grupos_etarios) |>
  summarise(totales = sum(fexp))

DMQ_estado_civil_grupos_urbano <- DMQ_urbano_2023 |>
  group_by(p06, grupos_etarios) |>
  filter(!is.na(p06)) |>
  summarise(totales = sum(fexp))

DMQ_estado_civil_grupos_rural <- DMQ_rural_2023 |>
  filter(!is.na(p06)) |>
  group_by(p06, grupos_etarios) |>
  summarise(totales = sum(fexp))

DMQ_estado_civil_grupos <- DMQ_2023 |>
  filter(!is.na(p06)) |>
  group_by(p06, grupos_etarios) |>
  summarise(totales = sum(fexp))


# Expandir horizontalmente

DMQ_estado_civil_grupos_ciudad <- DMQ_estado_civil_grupos_ciudad |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(totales),
    names_sep = "_"
  )

DMQ_estado_civil_grupos_urbano <- DMQ_estado_civil_grupos_urbano |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(totales),
    names_sep = "_"
  )


DMQ_estado_civil_grupos_rural <- DMQ_estado_civil_grupos_rural |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(totales),
    names_sep = "_"
  )

DMQ_estado_civil_grupos  <- DMQ_estado_civil_grupos |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(totales),
    names_sep = "_"
  )

# Cambiar etiquetas de variable
DMQ_estado_civil_grupos_ciudad  <- DMQ_estado_civil_grupos_ciudad |>
  mutate('Estado civil' = p06) |>
  mutate('Estado civil' = recode(`Estado civil`,
                                 `1` = 'Casado/a',
                                 `2` = 'Separado/a',
                                 `3` = 'Divorciado/a',
                                 `4` = 'Viudo/a',
                                 `5` = 'Unión libre',
                                 `6` = 'Soltero/a')) |>
  select(`Estado civil`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

DMQ_estado_civil_grupos_ciudad <- DMQ_estado_civil_grupos_ciudad[,-1]

DMQ_estado_civil_grupos_urbano  <- DMQ_estado_civil_grupos_urbano |>
  mutate('Estado civil' = p06) |>
  mutate('Estado civil' = recode(`Estado civil`,
                                 `1` = 'Casado/a',
                                 `2` = 'Separado/a',
                                 `3` = 'Divorciado/a',
                                 `4` = 'Viudo/a',
                                 `5` = 'Unión libre',
                                 `6` = 'Soltero/a')) |>
  select(`Estado civil`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

DMQ_estado_civil_grupos_urbano <- DMQ_estado_civil_grupos_urbano[,-1]


DMQ_estado_civil_grupos_rural  <- DMQ_estado_civil_grupos_rural |>
  mutate('Estado civil' = p06) |>
  mutate('Estado civil' = recode(`Estado civil`,
                                 `1` = 'Casado/a',
                                 `2` = 'Separado/a',
                                 `3` = 'Divorciado/a',
                                 `4` = 'Viudo/a',
                                 `5` = 'Unión libre',
                                 `6` = 'Soltero/a')) |>
  select(`Estado civil`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

DMQ_estado_civil_grupos_rural <- DMQ_estado_civil_grupos_rural[,-1]


DMQ_estado_civil_grupos  <- DMQ_estado_civil_grupos |>
  mutate('Estado civil' = p06) |>
  mutate('Estado civil' = recode(`Estado civil`,
                                 `1` = 'Casado/a',
                                 `2` = 'Separado/a',
                                 `3` = 'Divorciado/a',
                                 `4` = 'Viudo/a',
                                 `5` = 'Unión libre',
                                 `6` = 'Soltero/a')) |>
  select(`Estado civil`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))



DMQ_estado_civil_grupos <- DMQ_estado_civil_grupos[,-1]

# Agregar fila con totales

# DMQ ciudad

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_estado_civil_grupos_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_estado_civil_grupos_ciudad <- bind_rows(DMQ_estado_civil_grupos_ciudad, sumas)

DMQ_estado_civil_grupos_ciudad <- DMQ_estado_civil_grupos_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ urbano

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_estado_civil_grupos_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_estado_civil_grupos_urbano <- bind_rows(DMQ_estado_civil_grupos_urbano, sumas)

DMQ_estado_civil_grupos_urbano <- DMQ_estado_civil_grupos_urbano |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ Urbano

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_estado_civil_grupos_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_estado_civil_grupos_rural <- bind_rows(DMQ_estado_civil_grupos_rural, sumas)

DMQ_estado_civil_grupos_rural <- DMQ_estado_civil_grupos_rural |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ total

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_estado_civil_grupos |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_estado_civil_grupos <- bind_rows(DMQ_estado_civil_grupos, sumas)

DMQ_estado_civil_grupos <- DMQ_estado_civil_grupos |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# Agregar columnas de porcentajes por grupos etarios


#  DMQ ciudad

DMQ_estado_civil_grupos_ciudad <- DMQ_estado_civil_grupos_ciudad |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_estado_civil_grupos_ciudad$`Total general`[1:6]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Estado civil`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ Urbano

DMQ_estado_civil_grupos_urbano <- DMQ_estado_civil_grupos_urbano |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_estado_civil_grupos_urbano$`Total general`[1:6]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Estado civil`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ rural

DMQ_estado_civil_grupos_rural <- DMQ_estado_civil_grupos_rural |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_estado_civil_grupos_rural$`Total general`[1:6]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Estado civil`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ total

DMQ_estado_civil_grupos <- DMQ_estado_civil_grupos |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_estado_civil_grupos$`Total general`[1:6]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Estado civil`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

# Imprimir tablas al documento


#  Quito ciudad
estado_civil_grupos_ciudad <- kable(DMQ_estado_civil_grupos_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_estado_civil_grupos_ciudad), bold = TRUE) |>
  add_header_above(c(" " =1, "Estado civil por grupos etatios - Quito Ciudad" = 13)) 

# DMQ Urbano
estado_civil_grupos_urbano <- kable(DMQ_estado_civil_grupos_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_estado_civil_grupos_urbano), bold = TRUE) |>
  add_header_above(c(" " =1, "Estado civil por grupos etarios - DMQ Urbano" = 13)) 

# DMQ rural
estado_civil_grupos_rural <- kable(DMQ_estado_civil_grupos_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_estado_civil_grupos_rural), bold = TRUE) |>
  add_header_above(c(" " =1, "Estado civil por grupos etarios - DMQ Rural" = 13)) 

# todo DMQ
estado_civil_grupos_todo_DMQ <- kable(DMQ_estado_civil_grupos,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_estado_civil_grupos), bold = TRUE) |>
  add_header_above(c(" " =1, "Estado civil por grupos etarios - Zona DMQ" = 13)) 




estado_civil_grupos_ciudad
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

estado_civil_grupos_todo_DMQ

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

estado_civil_grupos_urbano

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

estado_civil_grupos_rural

```

## Nivel de Instrucción

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: true


#####  Nivel de instrucción     ######

# DMQ Ciudad o Quito Ciudad 
DMQ_ciudad_NI <- DMQ_ciudad |> 
  filter(!is.na(p10a)) |>
  group_by(p02, p10a) |>
  summarise(total = sum(fexp))|>
  ungroup()|>
  mutate(
    Porcentaje = (total / sum(total, na.rm = T)) * 100) 

DMQ_ciudad_NI_total <- DMQ_ciudad |> 
  group_by(p10a) |>
  filter(!is.na(p10a)) |>
  summarise(total = sum(fexp)) |>
  mutate(
    Porcentaje = (total / sum(total, na.rm = T)) * 100)

DMQ_ciudad_NI <- DMQ_ciudad_NI |>
  left_join(DMQ_ciudad_NI_total, by = "p10a")

# Urbano
DMQ_urbano_NI <- DMQ_urbano_2023 |> 
  group_by(p02, p10a) |>
  filter(!is.na(p10a)) |>
  summarise(total = sum(fexp)) |>
  ungroup()|>
  mutate(
    Porcentaje = (total / sum(total, na.rm = T)) * 100)

DMQ_urbano_NI_total <- DMQ_urbano_2023 |> 
  group_by(p10a) |>
  filter(!is.na(p10a)) |>
  summarise(total = sum(fexp)) |>
  mutate(
    Porcentaje = (total / sum(total, na.rm = T)) * 100)

DMQ_urbano_NI <- DMQ_urbano_NI |>
  left_join(DMQ_urbano_NI_total, by = "p10a") 

# Rural
DMQ_rural_NI <- DMQ_rural_2023 |> 
  group_by(p02, p10a) |>
  filter(!is.na(p10a)) |>
  summarise(total = sum(fexp)) |>
  ungroup()|>
  mutate(
    Porcentaje = (total / sum(total, na.rm = T)) * 100)

DMQ_rural_NI_total <- DMQ_rural_2023 |> 
  group_by(p10a) |>
  filter(!is.na(p10a)) |>
  summarise(total = sum(fexp)) |>
  mutate(
    Porcentaje = (total / sum(total, na.rm = T)) * 100)

DMQ_rural_NI <- DMQ_rural_NI |>
  left_join(DMQ_rural_NI_total, by = "p10a")


# DMQ Total
DMQ_NI <- DMQ_2023 |> 
  filter(!is.na(p10a)) |>
  group_by(p02, p10a) |>
  summarise(total = sum(fexp))  |>
  ungroup()|>
  mutate(
    Porcentaje = (total / sum(total, na.rm = T)) * 100)

DMQ_NI_total <- DMQ_2023 |> 
  filter(!is.na(p10a)) |>
  group_by(p10a) |>
  summarise(total = sum(fexp))  |>
  mutate(
    Porcentaje = (total / sum(total, na.rm = T)) * 100)

DMQ_NI <- DMQ_NI |>
  left_join(DMQ_NI_total, by = "p10a") 

# Expandir horizontalmente las tablas para exportar

# DMQ ciudad
DMQ_ciudad_NI <- DMQ_ciudad_NI |>
  pivot_wider(
    names_from = p02,
    values_from =  c(starts_with("total"),starts_with("Porcentaje")),
  names_sep = "_"
)

# Urbano
DMQ_urbano_NI <- DMQ_urbano_NI |>
  pivot_wider(
    names_from = p02,
    values_from =  c(starts_with("total"),starts_with("Porcentaje")),
  names_sep = "_"
)

# Rural
DMQ_rural_NI <- DMQ_rural_NI |>
  pivot_wider(
    names_from = p02,
    values_from =  c(starts_with("total"),starts_with("Porcentaje")),
  names_sep = "_"
)

# Todo DMQ
DMQ_NI <- DMQ_NI |>
  pivot_wider(
    names_from = p02,
    values_from =  c(starts_with("total"),starts_with("Porcentaje")),
  names_sep = "_"
)

# Cambiar nombre de las categorias y de la variable de nivel de instrucción

# DMQ ciudad

DMQ_ciudad_NI <- DMQ_ciudad_NI |>
  mutate(`Nivel de Instrucción` = p10a,
         `Cantidad M`=  total.x_2,
         `Cantidad H`= total.x_1,
         `Cantidad P`= total.y_1,
         `Porcentaje M`= Porcentaje.x_2,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje P` = Porcentaje.y_1) |>
  mutate(`Nivel de Instrucción` = recode(`Nivel de Instrucción`,
                                         `1` = "Ninguno",
                                         `2` = "Centro de alfabetización",
                                         `3` = "Jardín de infantes",
                                         `4` = "Primaria",
                                         `5` = "Educación Básica",
                                         `6` = "Secundaria",
                                         `7` = "Educación media/Bachillerato",
                                         `8` = "Superior no Universitario",
                                         `9` = "Superior Universitario",
                                         `10`= "Post-grado"))|>
  select(`Nivel de Instrucción`,`Cantidad P`,`Porcentaje P`, `Cantidad M`,
         `Porcentaje M`, `Cantidad H`, `Porcentaje H`)

# Agregar la fila con los totales por variable

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_ciudad_NI |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_ciudad_NI <- bind_rows(DMQ_ciudad_NI, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ urbano

DMQ_urbano_NI <- DMQ_urbano_NI |>
  mutate(`Nivel de Instrucción` = p10a,
         `Cantidad M`=  total.x_2,
         `Cantidad H`= total.x_1,
         `Cantidad P`= total.y_1,
         `Porcentaje M`= Porcentaje.x_2,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje P` = Porcentaje.y_1) |>
  mutate(`Nivel de Instrucción` = recode(`Nivel de Instrucción`,
                                         `1` = "Ninguno",
                                         `2` = "Centro de alfabetización",
                                         `3` = "Jardín de infantes",
                                         `4` = "Primaria",
                                         `5` = "Educación Básica",
                                         `6` = "Secundaria",
                                         `7` = "Educación media/Bachillerato",
                                         `8` = "Superior no Universitario",
                                         `9` = "Superior Universitario",
                                         `10`= "Post-grado"))|>
  select(`Nivel de Instrucción`,`Cantidad P`,`Porcentaje P`, `Cantidad M`,
         `Porcentaje M`, `Cantidad H`, `Porcentaje H`)

# Agregar la fila con los totales por variable

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_urbano_NI |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_urbano_NI <- bind_rows(DMQ_urbano_NI, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ rural

DMQ_rural_NI <- DMQ_rural_NI |>
  mutate(`Nivel de Instrucción` = p10a,
         `Cantidad M`=  total.x_2,
         `Cantidad H`= total.x_1,
         `Cantidad P`= total.y_1,
         `Porcentaje M`= Porcentaje.x_2,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje P` = Porcentaje.y_1) |>
  mutate(`Nivel de Instrucción` = recode(`Nivel de Instrucción`,
                                         `1` = "Ninguno",
                                         `2` = "Centro de alfabetización",
                                         `3` = "Jardín de infantes",
                                         `4` = "Primaria",
                                         `5` = "Educación Básica",
                                         `6` = "Secundaria",
                                         `7` = "Educación media/Bachillerato",
                                         `8` = "Superior no Universitario",
                                         `9` = "Superior Universitario",
                                         `10`= "Post-grado"))|>
  select(`Nivel de Instrucción`,`Cantidad P`,`Porcentaje P`, `Cantidad M`,
         `Porcentaje M`, `Cantidad H`, `Porcentaje H`)

# Agregar la fila con los totales por variable

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_rural_NI |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_rural_NI <- bind_rows(DMQ_rural_NI, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ total

DMQ_NI <- DMQ_NI |>
  mutate(`Nivel de Instrucción` = p10a,
         `Cantidad M`=  total.x_2,
         `Cantidad H`= total.x_1,
         `Cantidad P`= total.y_1,
         `Porcentaje M`= Porcentaje.x_2,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje P` = Porcentaje.y_1) |>
  mutate(`Nivel de Instrucción` = recode(`Nivel de Instrucción`,
                                         `1` = "Ninguno",
                                         `2` = "Centro de alfabetización",
                                         `3` = "Jardín de infantes",
                                         `4` = "Primaria",
                                         `5` = "Educación Básica",
                                         `6` = "Secundaria",
                                         `7` = "Educación media/Bachillerato",
                                         `8` = "Superior no Universitario",
                                         `9` = "Superior Universitario",
                                         `10`= "Post-grado"))|>
  select(`Nivel de Instrucción`,`Cantidad P`,`Porcentaje P`, `Cantidad M`,
         `Porcentaje M`, `Cantidad H`, `Porcentaje H`)

# Agregar la fila con los totales por variable

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_NI |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_NI <- bind_rows(DMQ_NI, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# Imprimir tabla en documento

#  Quito ciudad
NI_ciudad <- kable(DMQ_ciudad_NI,
     caption = "Nivel de instrucción - DMQ Ciudad",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_ciudad_NI), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO CIUDAD" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 
# DMQ Urbano
NI_urbano <- kable(DMQ_urbano_NI,
     caption = "Nivel de instrucción - DMQ urbano",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_urbano_NI), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO URBANO" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# DMQ rural
NI_rural <- kable(DMQ_rural_NI,
     caption = "Nivel de instrucción - DMQ rural",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_rural_NI), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO RURAL" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# todo DMQ
NI_DMQ <- kable(DMQ_NI,
     caption = "Nivel de instrucción - Zona DMQ",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_NI), bold = TRUE) |>
  add_header_above(c(" " =1, "TOTAL DMQ" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 


NI_ciudad
NI_DMQ 
NI_urbano  
NI_rural
```

### Nivel de Instrucción por grupos etarios

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page


# Nivel de instrucción por grupos etarios

# DMQ ciudad
DMQ_grupos_ciudad_NI <- DMQ_ciudad |> 
  filter(!is.na(p10a)) |>
  group_by(grupos_etarios, p10a) |>
  summarise(total = sum(fexp))

# Urbano
DMQ_grupos_urbano_NI <- DMQ_urbano_2023 |> 
  filter(!is.na(p10a)) |>
  group_by(grupos_etarios, p10a) |>
  summarise(total = sum(fexp))

# Rural
DMQ_grupos_rual_NI <- DMQ_rural_2023 |> 
  filter(!is.na(p10a)) |>
  group_by(grupos_etarios, p10a) |>
  summarise(total = sum(fexp)) 

# DMQ Total
DMQ_grupos_NI <- DMQ_2023 |> 
  filter(!is.na(p10a)) |>
  group_by(grupos_etarios, p10a) |>
  summarise(total = sum(fexp)) 

# Expandir horizontalmente las tablas para exportar a excel

# DMQ ciudad
DMQ_grupos_ciudad_NI <- DMQ_grupos_ciudad_NI |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(p10a)


# Urbano
DMQ_grupos_urbano_NI <- DMQ_grupos_urbano_NI |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(p10a)

# rural
DMQ_grupos_rural_NI <- DMQ_grupos_rual_NI |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(p10a)

# todo DMQ
DMQ_grupos_NI <- DMQ_grupos_NI |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(p10a)


# Cambiar etiquetas y nombres de variables

DMQ_grupos_ciudad_NI  <- DMQ_grupos_ciudad_NI |>
  mutate(`Nivel de Instrucción` = p10a) |>
  mutate(`Nivel de Instrucción` = recode(`Nivel de Instrucción`,
                                         `1` = "Ninguno",
                                         `2` = "Centro de alfabetización",
                                         `3` = "Jardín de infantes",
                                         `4` = "Primaria",
                                         `5` = "Educación Básica",
                                         `6` = "Secundaria",
                                         `7` = "Educación media/Bachillerato",
                                         `8` = "Superior no Universitario",
                                         `9` = "Superior Universitario",
                                         `10`= "Post-grado"))|>
  select(`Nivel de Instrucción`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

# DMQ urbano
DMQ_grupos_urbano_NI  <- DMQ_grupos_urbano_NI |>
  mutate(`Nivel de Instrucción` = p10a) |>
  mutate(`Nivel de Instrucción` = recode(`Nivel de Instrucción`,
                                         `1` = "Ninguno",
                                         `2` = "Centro de alfabetización",
                                         `3` = "Jardín de infantes",
                                         `4` = "Primaria",
                                         `5` = "Educación Básica",
                                         `6` = "Secundaria",
                                         `7` = "Educación media/Bachillerato",
                                         `8` = "Superior no Universitario",
                                         `9` = "Superior Universitario",
                                         `10`= "Post-grado"))|>
  select(`Nivel de Instrucción`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

# DMQ rural

DMQ_grupos_rural_NI  <- DMQ_grupos_rural_NI |>
  mutate(`Nivel de Instrucción` = p10a) |>
  mutate(`Nivel de Instrucción` = recode(`Nivel de Instrucción`,
                                         `1` = "Ninguno",
                                         `2` = "Centro de alfabetización",
                                         `3` = "Jardín de infantes",
                                         `4` = "Primaria",
                                         `5` = "Educación Básica",
                                         `6` = "Secundaria",
                                         `7` = "Educación media/Bachillerato",
                                         `8` = "Superior no Universitario",
                                         `9` = "Superior Universitario",
                                         `10`= "Post-grado"))|>
  select(`Nivel de Instrucción`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

# DMQ total

DMQ_grupos_NI  <- DMQ_grupos_NI |>
  mutate(`Nivel de Instrucción` = p10a) |>
  mutate(`Nivel de Instrucción` = recode(`Nivel de Instrucción`,
                                         `1` = "Ninguno",
                                         `2` = "Centro de alfabetización",
                                         `3` = "Jardín de infantes",
                                         `4` = "Primaria",
                                         `5` = "Educación Básica",
                                         `6` = "Secundaria",
                                         `7` = "Educación media/Bachillerato",
                                         `8` = "Superior no Universitario",
                                         `9` = "Superior Universitario",
                                         `10`= "Post-grado"))|>
  select(`Nivel de Instrucción`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))


# Agregar fila con totales

# DMQ ciudad

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_ciudad_NI |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_ciudad_NI <- bind_rows(DMQ_grupos_ciudad_NI, sumas)

DMQ_grupos_ciudad_NI <- DMQ_grupos_ciudad_NI |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ urbano

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_urbano_NI |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_urbano_NI <- bind_rows(DMQ_grupos_urbano_NI, sumas)

DMQ_grupos_urbano_NI <- DMQ_grupos_urbano_NI |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ rural

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_rural_NI |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_rural_NI <- bind_rows(DMQ_grupos_rural_NI, sumas)

DMQ_grupos_rural_NI <- DMQ_grupos_rural_NI |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ total

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_NI |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_NI <- bind_rows(DMQ_grupos_NI, sumas)

DMQ_grupos_NI <- DMQ_grupos_NI |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# Agregar columnas de porcentajes por grupos etarios


#  DMQ ciudad

DMQ_grupos_ciudad_NI <- DMQ_grupos_ciudad_NI |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_ciudad_NI$`Total general`[1:9]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Nivel de Instrucción`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ Urbano

DMQ_grupos_urbano_NI <- DMQ_grupos_urbano_NI |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_urbano_NI$`Total general`[1:9]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Nivel de Instrucción`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ rural

DMQ_grupos_rural_NI <- DMQ_grupos_rural_NI |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_rural_NI$`Total general`[1:9]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Nivel de Instrucción`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ total

DMQ_grupos_NI <- DMQ_grupos_NI |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_NI$`Total general`[1:9]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Nivel de Instrucción`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

# Imprimir tablas al documento


#  Quito ciudad
NI_grupos_ciudad <- kable(DMQ_grupos_ciudad_NI,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_ciudad_NI), bold = TRUE) |>
  add_header_above(c(" " =1, "Nivel de instrucción - Quito Ciudad" = 13)) 

# DMQ Urbano
NI_grupos_urbano <- kable(DMQ_grupos_urbano_NI,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_urbano_NI), bold = TRUE) |>
  add_header_above(c(" " =1, "Nivel de instrucción por grupos etarios - DMQ Urbano" = 13)) 

# DMQ rural
NI_grupos_rural <- kable(DMQ_grupos_rural_NI,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_rural_NI), bold = TRUE) |>
  add_header_above(c(" " =1, "Nivel de instrucción por grupos etarios - DMQ Rural" = 13)) 

# todo DMQ
NI_grupos_DMQ <- kable(DMQ_grupos_NI,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_NI), bold = TRUE) |>
  add_header_above(c(" " =1, "Nivel de instrucción por grupos etarios - Zona DMQ" = 13)) 

NI_grupos_ciudad
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page


NI_grupos_DMQ

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page


NI_grupos_urbano

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page


NI_grupos_rural

```

## Pobreza por ingresos

```{r}
#| echo: false
#| message: false
#| warning: false


###### Porbreza #####

# DMQ ciudad
DMQ_pobreza_ciudad <- DMQ_ciudad |>
  filter(!is.na(pobreza)) |>
  group_by(p02, pobreza) |>
  summarise(totales = sum(fexp, na.rm = T))|>
  ungroup()|>
  mutate(
    Porcentaje = (totales / sum(totales, na.rm = T)) * 100)



DMQ_pobreza_ciudad_total <- DMQ_ciudad |>
  filter(!is.na(pobreza)) |>
  group_by(pobreza) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_pobreza_ciudad <- DMQ_pobreza_ciudad |>
  left_join(DMQ_pobreza_ciudad_total, by = "pobreza")

# DMQ urbano
DMQ_pobreza_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(pobreza)) |>
  group_by(p02, pobreza) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100) 

DMQ_pobreza_urbano_total <- DMQ_urbano_2023 |>
  filter(!is.na(pobreza)) |>
  group_by(pobreza) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)


DMQ_pobreza_urbano <- DMQ_pobreza_urbano |>
  left_join(DMQ_pobreza_urbano_total, by = "pobreza")

# DMQ rural

DMQ_pobreza_rural <- DMQ_rural_2023 |>
  group_by(p02, pobreza) |>
  filter(!is.na(pobreza)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_pobreza_rural_total <- DMQ_rural_2023 |>
  group_by(pobreza) |>
  filter(!is.na(pobreza)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_pobreza_rural <- DMQ_pobreza_rural |>
  left_join(DMQ_pobreza_rural_total, by = "pobreza")

# DMQ total
DMQ_pobreza <- DMQ_2023 |>
  group_by(p02, pobreza) |>
  filter(!is.na(pobreza)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_pobreza_total <- DMQ_2023 |>
  group_by(pobreza) |>
  filter(!is.na(pobreza)) |>
  summarise(totales = sum(fexp)) |>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_pobreza <- DMQ_pobreza |>
  left_join(DMQ_pobreza_total, by ="pobreza")


# Expandir horizontalmente las variables para una mejor lectura

# DMQ ciudad
DMQ_pobreza_ciudad <- DMQ_pobreza_ciudad |>
  pivot_wider(
  names_from = p02,
  values_from = c(starts_with("totales"),starts_with("Porcentaje")),
  names_sep = "_"
)

#  DMQ Urbano
DMQ_pobreza_urbano <- DMQ_pobreza_urbano |>
  pivot_wider(
  names_from = p02,
  values_from = c(starts_with("totales"),starts_with("Porcentaje")),
  names_sep = "_"
)

# DmQ rural
DMQ_pobreza_rural <- DMQ_pobreza_rural |>
  pivot_wider(
    names_from = p02,
    values_from = c(starts_with("totales"),starts_with("Porcentaje")),
    names_sep = "_"
  )

# DMQ total
DMQ_pobreza  <- DMQ_pobreza |>
  pivot_wider(
    names_from = p02,
    values_from = c(starts_with("totales"),starts_with("Porcentaje")),
    names_sep = "_"
  )

#  Cambiar nombres y etiquetas de categorías

# DMQ ciudad
DMQ_pobreza_ciudad <- DMQ_pobreza_ciudad |>
  mutate(Pobreza = pobreza) |>
  mutate(Pobreza = recode(Pobreza,
                                 `1` = 'Pobre',
                                 `0` = "No pobre")) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Pobreza`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))

# DMQ urbano
DMQ_pobreza_urbano <- DMQ_pobreza_urbano |>
  mutate(Pobreza = pobreza) |>
  mutate(Pobreza = recode(Pobreza,
                                 `1` = 'Pobre',
                                 `0` = "No pobre")) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Pobreza`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))


# DMQ rural
DMQ_pobreza_rural <- DMQ_pobreza_rural |>
  mutate(Pobreza = pobreza) |>
  mutate(Pobreza = recode(Pobreza,
                                 `1` = 'Pobre',
                                 `0` = "No pobre")) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Pobreza`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))

#  DMQ total
DMQ_pobreza <- DMQ_pobreza |>
  mutate(Pobreza = pobreza) |>
  mutate(Pobreza = recode(Pobreza,
                                 `1` = 'Pobre',
                                 `0` = "No pobre")) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Pobreza`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))


# Formatear tablas de estado civil por sexo para imprimir en documento

# DMQ ciudad

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_pobreza_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_pobreza_ciudad <- bind_rows(DMQ_pobreza_ciudad, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ urbano

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_pobreza_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_pobreza_urbano <- bind_rows(DMQ_pobreza_urbano, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ rural

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_pobreza_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_pobreza_rural <- bind_rows(DMQ_pobreza_rural, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ total

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_pobreza |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_pobreza <- bind_rows(DMQ_pobreza, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# Imprimimos las tres tablas de estado civil por sexo


#  Quito ciudad
pobreza_ciudad <- kable(DMQ_pobreza_ciudad,
     caption = "Pobreza por ingresos - DMQ Ciudad",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_pobreza_ciudad), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO CIUDAD" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 
# DMQ Urbano
pobreza_urbano <- kable(DMQ_pobreza_urbano,
     caption = "Pobreza por ingresos - DMQ urbano",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_pobreza_urbano), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO URBANO" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# DMQ rural
pobreza_rural <- kable(DMQ_pobreza_rural,
     caption = "Pobreza por ingresos - DMQ rural",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_pobreza_rural), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO RURAL" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# todo DMQ
pobreza <- kable(DMQ_pobreza,
     caption = "Pobreza por ingresos - Zona DMQ",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_pobreza), bold = TRUE) |>
  add_header_above(c(" " =1, "TOTAL DMQ" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 
pobreza_ciudad
pobreza
pobreza_urbano
pobreza_rural
```

### Pobreza por ingresos y grupos etarios

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

# Pobreza por grupos etarios

# DMQ ciudad
DMQ_grupos_pobreza_ciudad <- DMQ_ciudad |> 
  filter(!is.na(pobreza)) |>
  group_by(grupos_etarios, pobreza) |>
  summarise(total = sum(fexp))

# Urbano
DMQ_grupos_pobreza_urbano <- DMQ_urbano_2023 |> 
  filter(!is.na(pobreza)) |>
  group_by(grupos_etarios, pobreza) |>
  summarise(total = sum(fexp))

# Rural
DMQ_grupos_pobreza_rural <- DMQ_rural_2023 |> 
  filter(!is.na(pobreza)) |>
  group_by(grupos_etarios, pobreza) |>
  summarise(total = sum(fexp)) 

# DMQ Total
DMQ_grupos_pobreza <- DMQ_2023 |> 
  filter(!is.na(pobreza)) |>
  group_by(grupos_etarios, pobreza) |>
  summarise(total = sum(fexp)) 

# Expandir horizontalmente las tablas para exportar a excel

# DMQ ciudad
DMQ_grupos_pobreza_ciudad <- DMQ_grupos_pobreza_ciudad |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(pobreza)


# Urbano
DMQ_grupos_pobreza_urbano <- DMQ_grupos_pobreza_urbano |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(pobreza)

# rural
DMQ_grupos_pobreza_rural <- DMQ_grupos_pobreza_rural |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(pobreza)

# todo DMQ
DMQ_grupos_pobreza <- DMQ_grupos_pobreza |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(pobreza)


# Cambiar etiquetas y nombres de variables

DMQ_grupos_pobreza_ciudad  <- DMQ_grupos_pobreza_ciudad |>
  mutate(Pobreza = pobreza) |>
  mutate(Pobreza = recode(Pobreza,
                                 `1` = 'Pobre',
                                 `0` = "No pobre")) |>
  select(Pobreza,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

# DMQ urbano
DMQ_grupos_pobreza_urbano <- DMQ_grupos_pobreza_urbano |>
  mutate(Pobreza = pobreza) |>
  mutate(Pobreza = recode(Pobreza,
                                 `1` = 'Pobre',
                                 `0` = "No pobre")) |>
  select(Pobreza,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

# DMQ rural

DMQ_grupos_pobreza_rural <- DMQ_grupos_pobreza_rural |>
  mutate(Pobreza = pobreza) |>
  mutate(Pobreza = recode(Pobreza,
                                 `1` = 'Pobre',
                                 `0` = "No pobre")) |>
  select(Pobreza,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

# DMQ total

DMQ_grupos_pobreza <- DMQ_grupos_pobreza |>
  mutate(Pobreza = pobreza) |>
  mutate(Pobreza = recode(Pobreza,
                                 `1` = 'Pobre',
                                 `0` = "No pobre")) |>
  select(Pobreza,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))


# Agregar fila con totales

# DMQ ciudad

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_pobreza_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_pobreza_ciudad <- bind_rows(DMQ_grupos_pobreza_ciudad, sumas)

DMQ_grupos_pobreza_ciudad <- DMQ_grupos_pobreza_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ urbano

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_pobreza_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_pobreza_urbano <- bind_rows(DMQ_grupos_pobreza_urbano, sumas)

DMQ_grupos_pobreza_urbano <- DMQ_grupos_pobreza_urbano |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ rural

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_pobreza_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_pobreza_rural <- bind_rows(DMQ_grupos_pobreza_rural, sumas)

DMQ_grupos_pobreza_rural <- DMQ_grupos_pobreza_rural |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ total

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_pobreza |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_pobreza <- bind_rows(DMQ_grupos_pobreza, sumas)

DMQ_grupos_pobreza <- DMQ_grupos_pobreza |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# Agregar columnas de porcentajes por grupos etarios


#  DMQ ciudad

DMQ_grupos_pobreza_ciudad <- DMQ_grupos_pobreza_ciudad |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_pobreza_ciudad$`Total general`[1:2]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(Pobreza,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ Urbano

DMQ_grupos_pobreza_urbano <- DMQ_grupos_pobreza_urbano |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_pobreza_urbano$`Total general`[1:2]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(Pobreza,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ rural

DMQ_grupos_pobreza_rural<- DMQ_grupos_pobreza_rural |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_pobreza_rural$`Total general`[1:2]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(Pobreza,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ total


DMQ_grupos_pobreza <- DMQ_grupos_pobreza |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_pobreza$`Total general`[1:2]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(Pobreza,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

# Imprimir tablas al documento


#  Quito ciudad
pobreza_grupos_ciudad <- kable(DMQ_grupos_pobreza_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_pobreza_ciudad), bold = TRUE) |>
  add_header_above(c(" " =1, "Pobreza por ingresos en grupos etarios - Quito Ciudad" = 13)) 

# DMQ Urbano
pobreza_grupos_urbano <- kable(DMQ_grupos_pobreza_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_pobreza_urbano), bold = TRUE) |>
  add_header_above(c(" " =1, "Pobreza por ingresos en grupos etarios - DMQ Urbano" = 13)) 

# DMQ rural
pobreza_grupos_rural <- kable(DMQ_grupos_pobreza_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_pobreza_rural), bold = TRUE) |>
  add_header_above(c(" " =1, "Pobreza por ingresos en grupos etarios - DMQ Rural" = 13)) 

# todo DMQ
pobreza_grupos <- kable(DMQ_grupos_pobreza,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_pobreza), bold = TRUE) |>
  add_header_above(c(" " =1, "Pobreza por ingresos en grupos etarios - Zona DMQ" = 13)) 


pobreza_grupos_ciudad
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

pobreza_grupos
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

pobreza_grupos_urbano
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

pobreza_grupos_rural
```


## Pobreza Extrema por ingresos

```{r}
#| echo: false
#| message: false
#| warning: false


###### Porbreza extrema por ingresos #####

# DMQ ciudad
DMQ_e_pobreza_ciudad <- DMQ_ciudad |>
  filter(!is.na(epobreza)) |>
  group_by(p02, epobreza) |>
  summarise(totales = sum(fexp, na.rm = T))|>
  ungroup()|>
  mutate(
    Porcentaje = (totales / sum(totales, na.rm = T)) * 100)

DMQ_e_pobreza_ciudad_total <- DMQ_ciudad |>
  filter(!is.na(epobreza)) |>
  group_by(epobreza) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_e_pobreza_ciudad <- DMQ_e_pobreza_ciudad |>
  left_join(DMQ_e_pobreza_ciudad_total, by = "epobreza")

# DMQ urbano
DMQ_e_pobreza_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(epobreza)) |>
  group_by(p02, epobreza) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100) 

DMQ_e_pobreza_urbano_total <- DMQ_urbano_2023 |>
  filter(!is.na(epobreza)) |>
  group_by(epobreza) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)


DMQ_e_pobreza_urbano <- DMQ_e_pobreza_urbano |>
  left_join(DMQ_e_pobreza_urbano_total, by = "epobreza")

# DMQ rural

DMQ_e_pobreza_rural <- DMQ_rural_2023 |>
  group_by(p02, epobreza) |>
  filter(!is.na(epobreza)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_e_pobreza_rural_total <- DMQ_rural_2023 |>
  group_by(epobreza) |>
  filter(!is.na(epobreza)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_e_pobreza_rural <- DMQ_e_pobreza_rural |>
  left_join(DMQ_e_pobreza_rural_total, by = "epobreza")

# DMQ total
DMQ_e_pobreza <- DMQ_2023 |>
  group_by(p02, epobreza) |>
  filter(!is.na(epobreza)) |>
  summarise(totales = sum(fexp))|>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_e_pobreza_total <- DMQ_2023 |>
  group_by(epobreza) |>
  filter(!is.na(epobreza)) |>
  summarise(totales = sum(fexp)) |>
  mutate(
    Porcentaje = totales / sum(totales) * 100)

DMQ_e_pobreza <- DMQ_e_pobreza |>
  left_join(DMQ_e_pobreza_total, by ="epobreza")


# Expandir horizontalmente las variables para una mejor lectura

# DMQ ciudad
DMQ_e_pobreza_ciudad <- DMQ_e_pobreza_ciudad |>
  pivot_wider(
  names_from = p02,
  values_from = c(starts_with("totales"),starts_with("Porcentaje")),
  names_sep = "_"
)

#  DMQ Urbano
DMQ_e_pobreza_urbano <- DMQ_e_pobreza_urbano |>
  pivot_wider(
  names_from = p02,
  values_from = c(starts_with("totales"),starts_with("Porcentaje")),
  names_sep = "_"
)

# DmQ rural
DMQ_e_pobreza_rural <- DMQ_e_pobreza_rural |>
  pivot_wider(
    names_from = p02,
    values_from = c(starts_with("totales"),starts_with("Porcentaje")),
    names_sep = "_"
  )

# DMQ total
DMQ_e_pobreza  <- DMQ_e_pobreza |>
  pivot_wider(
    names_from = p02,
    values_from = c(starts_with("totales"),starts_with("Porcentaje")),
    names_sep = "_"
  )

#  Cambiar nombres y etiquetas de categorías

# DMQ ciudad
DMQ_e_pobreza_ciudad <- DMQ_e_pobreza_ciudad |>
  mutate(`Pobreza Extrema` = epobreza) |>
  mutate(`Pobreza Extrema` = recode(`Pobreza Extrema`,
                                 `1` = 'Indigente',
                                 `0` = "No indigente")) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Pobreza Extrema`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))

# DMQ urbano
DMQ_e_pobreza_urbano <- DMQ_e_pobreza_urbano |>
  mutate(`Pobreza Extrema` = epobreza) |>
  mutate(`Pobreza Extrema` = recode(`Pobreza Extrema`,
                                 `1` = 'Indigente',
                                 `0` = "No indigente")) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Pobreza Extrema`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))

# DMQ rural
DMQ_e_pobreza_rural <- DMQ_e_pobreza_rural |>
  mutate(`Pobreza Extrema` = epobreza) |>
  mutate(`Pobreza Extrema` = recode(`Pobreza Extrema`,
                                 `1` = 'Indigente',
                                 `0` = "No indigente")) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Pobreza Extrema`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))

#  DMQ total
DMQ_e_pobreza <- DMQ_e_pobreza |>
  mutate(`Pobreza Extrema` = epobreza) |>
  mutate(`Pobreza Extrema` = recode(`Pobreza Extrema`,
                                 `1` = 'Indigente',
                                 `0` = "No indigente")) |>
  mutate(`Cantidad M` =  totales.x_2,
         `Cantidad H` = totales.x_1,
         `Cantidad P` = totales.y_1,
         `Porcentaje H`= Porcentaje.x_1,
         `Porcentaje M`=Porcentaje.x_2,
         `Porcentaje P` = Porcentaje.y_1) |>
  select(`Pobreza Extrema`, `Cantidad P`, `Porcentaje P`,`Cantidad M` ,`Porcentaje M`, `Cantidad H`, `Porcentaje H`, ) |>
  arrange(desc(`Porcentaje P`))


# Formatear tablas de estado civil por sexo para imprimir en documento

# DMQ ciudad

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_e_pobreza_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_e_pobreza_ciudad <- bind_rows(DMQ_e_pobreza_ciudad, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ urbano

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_e_pobreza_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_e_pobreza_urbano <- bind_rows(DMQ_e_pobreza_urbano, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ rural

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_e_pobreza_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_e_pobreza_rural <- bind_rows(DMQ_e_pobreza_rural, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ total

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_e_pobreza |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_e_pobreza <- bind_rows(DMQ_e_pobreza, sumas) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  mutate(across(everything(), ~replace_na(., "Total")))

# Imprimimos las tres tablas de estado civil por sexo


#  Quito ciudad
pobreza_e_ciudad <- kable(DMQ_e_pobreza_ciudad,
     caption = "Pobreza extrema por ingresos - DMQ Ciudad",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_e_pobreza_ciudad), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO CIUDAD" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 
# DMQ Urbano
pobreza_e_urbano <- kable(DMQ_e_pobreza_urbano,
     caption = "Pobreza extrema por ingresos - DMQ urbano",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_e_pobreza_urbano), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO URBANO" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# DMQ rural
pobreza_e_rural <- kable(DMQ_e_pobreza_rural,
     caption = "Pobreza extrema por ingresos - DMQ rural",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_e_pobreza_rural), bold = TRUE) |>
  add_header_above(c(" " =1, "QUITO RURAL" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 

# todo DMQ
pobreza_e <- kable(DMQ_e_pobreza,
     caption = "Pobreza extrema por ingresos - Zona DMQ",
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(DMQ_e_pobreza), bold = TRUE) |>
  add_header_above(c(" " =1, "TOTAL DMQ" = 2, "Mujeres" = 2,
                     "Hombres" = 2)) 
pobreza_e_ciudad
pobreza_e
pobreza_e_urbano
pobreza_e_rural

```

### Pobreza Extrema por ingresos en grupos etarios

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

# Pobreza extrema por grupos etarios

# DMQ ciudad
DMQ_grupos_e_pobreza_ciudad <- DMQ_ciudad |> 
  filter(!is.na(epobreza)) |>
  group_by(grupos_etarios, epobreza) |>
  summarise(total = sum(fexp))

# Urbano
DMQ_grupos_e_pobreza_urbano <- DMQ_urbano_2023 |> 
  filter(!is.na(epobreza)) |>
  group_by(grupos_etarios, epobreza) |>
  summarise(total = sum(fexp))

# Rural
DMQ_grupos_e_pobreza_rural <- DMQ_rural_2023 |> 
  filter(!is.na(epobreza)) |>
  group_by(grupos_etarios, epobreza) |>
  summarise(total = sum(fexp)) 

# DMQ Total
DMQ_grupos_e_pobreza <- DMQ_2023 |> 
  filter(!is.na(epobreza)) |>
  group_by(grupos_etarios, epobreza) |>
  summarise(total = sum(fexp)) 

# Expandir horizontalmente las tablas para exportar a excel

# DMQ ciudad
DMQ_grupos_e_pobreza_ciudad <- DMQ_grupos_e_pobreza_ciudad |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(epobreza)


# Urbano
DMQ_grupos_e_pobreza_urbano <- DMQ_grupos_e_pobreza_urbano |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(epobreza)

# rural
DMQ_grupos_e_pobreza_rural <- DMQ_grupos_e_pobreza_rural |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(epobreza)

# todo DMQ
DMQ_grupos_e_pobreza <- DMQ_grupos_e_pobreza |>
  pivot_wider(
    names_from = grupos_etarios,
    values_from = c(total),
    names_sep = "_"
  ) |> arrange(epobreza)


# Cambiar etiquetas y nombres de variables

DMQ_grupos_e_pobreza_ciudad  <- DMQ_grupos_e_pobreza_ciudad |>
  mutate(`Pobreza Extrema` = epobreza) |>
  mutate(`Pobreza Extrema` = recode(`Pobreza Extrema`,
                                 `1` = 'Indigente',
                                 `0` = "No indigente")) |>
  select(`Pobreza Extrema`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

# DMQ urbano
DMQ_grupos_e_pobreza_urbano  <- DMQ_grupos_e_pobreza_urbano |>
  mutate(`Pobreza Extrema` = epobreza) |>
  mutate(`Pobreza Extrema` = recode(`Pobreza Extrema`,
                                 `1` = 'Indigente',
                                 `0` = "No indigente")) |>
  select(`Pobreza Extrema`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))


# DMQ rural

DMQ_grupos_e_pobreza_rural  <- DMQ_grupos_e_pobreza_rural |>
  mutate(`Pobreza Extrema` = epobreza) |>
  mutate(`Pobreza Extrema` = recode(`Pobreza Extrema`,
                                 `1` = 'Indigente',
                                 `0` = "No indigente")) |>
  select(`Pobreza Extrema`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))

# DMQ total

DMQ_grupos_e_pobreza  <- DMQ_grupos_e_pobreza |>
  mutate(`Pobreza Extrema` = epobreza) |>
  mutate(`Pobreza Extrema` = recode(`Pobreza Extrema`,
                                 `1` = 'Indigente',
                                 `0` = "No indigente")) |>
  select(`Pobreza Extrema`,`0-14`, `15-24`, `25-34`, `35-44`, `45-64`, `65+`)|>
  mutate(across(everything(), ~replace_na(., 0))) |>
  rowwise() |>
  mutate(`Total general` = sum(c_across(`0-14`:`65+`), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = (`Total general` / sum(`Total general`)) * 100) |>
  arrange(desc(Porcentaje))


# Agregar fila con totales

# DMQ ciudad

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_e_pobreza_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_e_pobreza_ciudad <- bind_rows(DMQ_grupos_e_pobreza_ciudad, sumas)

DMQ_grupos_e_pobreza_ciudad <- DMQ_grupos_e_pobreza_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ urbano

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_e_pobreza_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_e_pobreza_urbano <- bind_rows(DMQ_grupos_e_pobreza_urbano, sumas)

DMQ_grupos_e_pobreza_urbano <- DMQ_grupos_e_pobreza_urbano |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ rural

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_e_pobreza_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_e_pobreza_rural <- bind_rows(DMQ_grupos_e_pobreza_rural, sumas)

DMQ_grupos_e_pobreza_rural <- DMQ_grupos_e_pobreza_rural |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ total

# Primero, calculamos las sumas de las columnas numéricas
sumas <- DMQ_grupos_e_pobreza |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
DMQ_grupos_e_pobreza <- bind_rows(DMQ_grupos_e_pobreza, sumas)

DMQ_grupos_e_pobreza <- DMQ_grupos_e_pobreza |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# Agregar columnas de porcentajes por grupos etarios


#  DMQ ciudad

DMQ_grupos_e_pobreza_ciudad <- DMQ_grupos_e_pobreza_ciudad |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_e_pobreza_ciudad$`Total general`[1:2]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Pobreza Extrema`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ Urbano

DMQ_grupos_e_pobreza_urbano <- DMQ_grupos_e_pobreza_urbano |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_e_pobreza_urbano$`Total general`[1:2]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Pobreza Extrema`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ rural

DMQ_grupos_e_pobreza_rural <- DMQ_grupos_e_pobreza_rural |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_e_pobreza_rural$`Total general`[1:2]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Pobreza Extrema`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 

#  DMQ total

DMQ_grupos_e_pobreza <- DMQ_grupos_e_pobreza |>
  ungroup() |>
  rowwise() |>
  mutate(across(`0-14`:`65+`, ~ . / sum(DMQ_grupos_e_pobreza_rural$`Total general`[1:2]) * 100, .names = "Porcentaje_{.col}")) |>
  ungroup() |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%")))  |>
  select(`Pobreza Extrema`,`0-14`, `Porcentaje_0-14`, `15-24`,
         `Porcentaje_15-24`, `25-34`, `Porcentaje_15-24`,
         `35-44`,`Porcentaje_35-44`, `45-64`, `Porcentaje_45-64`,
         `65+`, `Porcentaje_65+`,  `Total general`, Porcentaje) 


# Imprimir tablas al documento


#  Quito ciudad
pobreza_e_grupos_ciudad <- kable(DMQ_grupos_e_pobreza_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_e_pobreza_ciudad), bold = TRUE) |>
  add_header_above(c(" " =1, "Pobreza extrema por ingresos en grupos etarios - Quito Ciudad" = 13)) 

# DMQ Urbano
pobreza_e_grupos_urbano <- kable(DMQ_grupos_e_pobreza_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_e_pobreza_urbano), bold = TRUE) |>
  add_header_above(c(" " =1, "Pobreza extrema por ingresos en grupos etarios - DMQ Urbano" = 13)) 

# DMQ rural
pobreza_e_grupos_rural <- kable(DMQ_grupos_e_pobreza_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_e_pobreza_rural), bold = TRUE) |>
  add_header_above(c(" " =1, "Pobreza extrema por ingresos en grupos etarios - DMQ Rural" = 13)) 

# todo DMQ
pobreza_e_grupos <- kable(DMQ_grupos_e_pobreza_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover"), font_size = 10) |>
  row_spec(nrow(DMQ_grupos_e_pobreza_urbano), bold = TRUE) |>
  add_header_above(c(" " =1, "Pobreza extrema por ingresos en grupos etarios - Zona DMQ" = 13)) 


pobreza_e_grupos_ciudad
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

pobreza_e_grupos

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

pobreza_e_grupos_urbano

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

pobreza_e_grupos_rural

```

::: callout-important
Los indicadores de mercado laboral efectivamente calculados se los encuentra en la pestaña denominada “Condición de actividad” (PET, PEA, PEI, tasa de empleo global). Las pestañas denominadas “PET”, “PEA” y “PEI”, contienen valores brutos que no necesariamente reflejan el cálculo del indicador.
:::


## Población en Edad de Trabajar (PET)

```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-ncol: 4

# Población en edad de trabajar

# Quito ciudad 

PET_ciudad <- DMQ_ciudad |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PET_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PET_ciudad <- bind_rows(PET_ciudad, sumas)

PET_ciudad <- PET_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ urbano 

PET_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PET_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PET_urbano <- bind_rows(PET_urbano, sumas)

PET_urbano <- PET_urbano |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ rural 

PET_rural <- DMQ_rural_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PET_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PET_rural <- bind_rows(PET_rural, sumas)

PET_rural <- PET_rural |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ total 

PET_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PET_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PET_DMQ <- bind_rows(PET_DMQ, sumas)

PET_DMQ <- PET_DMQ |>
  mutate(across(everything(), ~replace_na(., "Total")))

# Agregamos las tablas para imprimir en el documento


#  Quito ciudad
PET_table_ciudad <- kable(PET_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PET_ciudad), bold = TRUE) |>
  add_header_above(c("PET por sexo - Quito ciudad" = 3))

# DMQ Urbano
PET_table_urbano <- kable(PET_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PET_urbano), bold = TRUE) |>
  add_header_above(c("PET por sexo - DMQ urbano" = 3))

# DMQ rural
PET_table_rural <- kable(PET_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PET_rural), bold = TRUE) |>
  add_header_above(c("PET por sexo - DMQ rural" = 3))

# todo DMQ
PET_table_DMQ <- kable(PET_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PET_DMQ), bold = TRUE) |>
  add_header_above(c("PET por sexo - Zona DMQ" = 3))

PET_table_ciudad
PET_table_DMQ
PET_table_urbano
PET_table_rural


```

### Población en Edad de Trabajar (PET) por grupos etarios

```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-nrow: 2

# Quito ciudad 

PET_grupos_ciudad <- DMQ_ciudad |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PET_grupos_ciudad <- PET_grupos_ciudad[,-1]

# Tranformar la tabla horizontalmente

PET_grupos_ciudad <- PET_grupos_ciudad |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PET_grupos_ciudad[, sapply(PET_grupos_ciudad, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PET_grupos_ciudad <- bind_rows(PET_grupos_ciudad, sumas)

PET_grupos_ciudad <- PET_grupos_ciudad |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Quito urbano 

PET_grupos_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PET_grupos_urbano <- PET_grupos_urbano[,-1]

# Tranformar la tabla horizontalmente

PET_grupos_urbano <- PET_grupos_urbano |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PET_grupos_urbano[, sapply(PET_grupos_urbano, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PET_grupos_urbano <- bind_rows(PET_grupos_urbano, sumas)

PET_grupos_urbano <- PET_grupos_urbano |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Quito rural 

PET_grupos_rural <- DMQ_rural_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PET_grupos_rural <- PET_grupos_rural[,-1]

# Tranformar la tabla horizontalmente

PET_grupos_rural <- PET_grupos_rural |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PET_grupos_rural[, sapply(PET_grupos_rural, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PET_grupos_rural <- bind_rows(PET_grupos_rural, sumas)

PET_grupos_rural <- PET_grupos_rural |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Zona DMQ 

PET_grupos_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PET_grupos_DMQ <- PET_grupos_DMQ[,-1]

# Tranformar la tabla horizontalmente

PET_grupos_DMQ <- PET_grupos_DMQ |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PET_grupos_DMQ[, sapply(PET_grupos_DMQ, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PET_grupos_DMQ <- bind_rows(PET_grupos_DMQ, sumas)

PET_grupos_DMQ <- PET_grupos_DMQ |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# IMprimir tablas en documento


#  Quito ciudad
PET_grupos_tbl_ciudad <- kable(PET_grupos_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PET_grupos_ciudad), bold = TRUE) |>
  add_header_above(c("PET por grupos etarios y sexo - Quito ciudad" = 4))

# DMQ Urbano
PET_grupos_tbl_urbano <- kable(PET_grupos_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PET_grupos_urbano), bold = TRUE) |>
  add_header_above(c("PET por grupos etarios y sexo - DMQ urbano" = 4))

# DMQ rural
PET_grupos_tbl_rural <- kable(PET_grupos_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PET_grupos_rural), bold = TRUE) |>
  add_header_above(c("PET por grupos etarios y sexo - DMQ rural" = 4))

# todo DMQ
PET_grupos_tbl_DMQ <- kable(PET_grupos_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PET_grupos_DMQ), bold = TRUE) |>
  add_header_above(c("PET por grupos etarios y sexo - Zona DMQ" = 4))

PET_grupos_tbl_ciudad
PET_grupos_tbl_DMQ
PET_grupos_tbl_urbano
PET_grupos_tbl_rural

```

## Población Económicamente Activa (PEA)

```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-ncol: 4

# Quito cuidad

PEA_ciudad <- DMQ_ciudad |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PEA_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEA_ciudad <- bind_rows(PEA_ciudad, sumas)

PEA_ciudad <- PEA_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ urbano 

PEA_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PEA_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEA_urbano <- bind_rows(PEA_urbano, sumas)

PEA_urbano <- PEA_urbano |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ rural 

PEA_rural <- DMQ_rural_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PEA_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEA_rural <- bind_rows(PEA_rural, sumas)

PEA_rural <- PEA_rural |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ total 

PEA_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PEA_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEA_DMQ <- bind_rows(PEA_DMQ, sumas)

PEA_DMQ <- PEA_DMQ |>
  mutate(across(everything(), ~replace_na(., "Total")))

# Agregamos las tablas para imprimir en el documento


#  Quito ciudad
PEA_table_ciudad <- kable(PEA_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEA_ciudad), bold = TRUE) |>
  add_header_above(c("PEA por sexo - Quito ciudad" = 3))

# DMQ Urbano
PEA_table_urbano <- kable(PEA_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEA_urbano), bold = TRUE) |>
  add_header_above(c("PEA por sexo - DMQ urbano" = 3))

# DMQ rural
PEA_table_rural <- kable(PEA_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEA_rural), bold = TRUE) |>
  add_header_above(c("PEA por sexo - DMQ rural" = 3))

# todo DMQ
PEA_table_DMQ <- kable(PEA_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEA_DMQ), bold = TRUE) |>
  add_header_above(c("PEA por sexo - Zona DMQ" = 3))


PEA_table_ciudad
PEA_table_DMQ
PEA_table_urbano
PEA_table_rural


```

### Población Económicamente Activa (PEA) por grupos etarios

```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-nrow: 2


# Quito ciudad 

PEA_grupos_ciudad <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PEA_grupos_ciudad <- PEA_grupos_ciudad[,-1]

# Tranformar la tabla horizontalmente

PEA_grupos_ciudad <- PEA_grupos_ciudad |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PEA_grupos_ciudad[, sapply(PEA_grupos_ciudad, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEA_grupos_ciudad <- bind_rows(PEA_grupos_ciudad, sumas)

PEA_grupos_ciudad <- PEA_grupos_ciudad |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Quito urbano 

PEA_grupos_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PEA_grupos_urbano <- PEA_grupos_urbano[,-1]

# Tranformar la tabla horizontalmente

PEA_grupos_urbano <- PEA_grupos_urbano |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PEA_grupos_urbano[, sapply(PEA_grupos_urbano, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEA_grupos_urbano <- bind_rows(PEA_grupos_urbano, sumas)

PEA_grupos_urbano <- PEA_grupos_urbano |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Quito rural 

PEA_grupos_rural <- DMQ_rural_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PEA_grupos_rural <- PEA_grupos_rural[,-1]

# Tranformar la tabla horizontalmente

PEA_grupos_rural <- PEA_grupos_rural |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PEA_grupos_rural[, sapply(PEA_grupos_rural, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEA_grupos_rural <- bind_rows(PEA_grupos_rural, sumas)

PEA_grupos_rural <- PEA_grupos_rural |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Zona DMQ 

PEA_grupos_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PEA_grupos_DMQ <- PEA_grupos_DMQ[,-1]

# Tranformar la tabla horizontalmente

PEA_grupos_DMQ <- PEA_grupos_DMQ |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PEA_grupos_DMQ[, sapply(PEA_grupos_DMQ, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEA_grupos_DMQ <- bind_rows(PEA_grupos_DMQ, sumas)

PEA_grupos_DMQ <- PEA_grupos_DMQ |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# IMprimir tablas en documento


#  Quito ciudad
PEA_grupos_tbl_ciudad <- kable(PEA_grupos_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEA_grupos_ciudad), bold = TRUE) |>
  add_header_above(c("PEA por grupos etarios y sexo - Quito ciudad" = 4))

# DMQ Urbano
PEA_grupos_tbl_urbano <- kable(PEA_grupos_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEA_grupos_urbano), bold = TRUE) |>
  add_header_above(c("EA por grupos etarios y sexo - DMQ urbano" = 4))

# DMQ rural
PEA_grupos_tbl_rural <- kable(PEA_grupos_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
   row_spec(nrow(PEA_grupos_rural), bold = TRUE) |>
  add_header_above(c("PEA por grupos etarios y sexo - DMQ rural" = 4))

# todo DMQ
PEA_grupos_tbl_DMQ <- kable(PEA_grupos_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEA_grupos_DMQ), bold = TRUE) |>
  add_header_above(c("PEA por grupos etarios y sexo - Zona DMQ" = 4))


PEA_grupos_tbl_ciudad
PEA_grupos_tbl_DMQ
PEA_grupos_tbl_urbano
PEA_grupos_tbl_rural

```

## Población Económicamente Inactiva (PEI)

```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-nrow: 2


# Quito cuidad

PEI_ciudad <- DMQ_ciudad |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PEI_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEI_ciudad <- bind_rows(PEI_ciudad, sumas)

PEI_ciudad <- PEI_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ urbano 

PEI_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PEI_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEI_urbano <- bind_rows(PEI_urbano, sumas)

PEI_urbano <- PEI_urbano |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ rural 

PEI_rural <- DMQ_rural_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PEI_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEI_rural <- bind_rows(PEI_rural, sumas)

PEI_rural <- PEI_rural |>
  mutate(across(everything(), ~replace_na(., "Total"))) 

# DMQ total 

PEI_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  group_by(p02) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(Sexo, Cantidad, Porcentaje)

# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- PEI_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEI_DMQ <- bind_rows(PEI_DMQ, sumas)

PEI_DMQ <- PEI_DMQ |>
  mutate(across(everything(), ~replace_na(., "Total")))

# Agregamos las tablas para imprimir en el documento


#  Quito ciudad
PEI_table_ciudad <- kable(PEI_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEI_ciudad), bold = TRUE) |>
  add_header_above(c("PEI por sexo - Quito ciudad" = 3))

# DMQ Urbano
PEI_table_urbano <- kable(PEI_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEI_urbano), bold = TRUE) |>
  add_header_above(c("PEI por sexo - DMQ urbano" = 3))

# DMQ rural
PEI_table_rural <- kable(PEI_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEI_rural), bold = TRUE) |>
  add_header_above(c("PEI por sexo - DMQ rural" = 3))

# todo DMQ
PEI_table_DMQ <- kable(PEA_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEA_DMQ), bold = TRUE) |>
  add_header_above(c("PEI por sexo - Zona DMQ " = 3))

PEI_table_ciudad
PEI_table_DMQ
PEI_table_urbano
PEI_table_rural

```

### Población Económicamente Inactiva (PEI) por grupos etarios

```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-nrow: 2


# Quito ciudad 

PEI_grupos_ciudad <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PEI_grupos_ciudad <- PEI_grupos_ciudad[,-1]

# Tranformar la tabla horizontalmente

PEI_grupos_ciudad <- PEI_grupos_ciudad |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PEA_grupos_ciudad[, sapply(PEA_grupos_ciudad, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEI_grupos_ciudad <- bind_rows(PEI_grupos_ciudad, sumas)

PEI_grupos_ciudad <- PEI_grupos_ciudad |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Quito urbano 

PEI_grupos_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PEI_grupos_urbano <- PEI_grupos_urbano[,-1]

# Tranformar la tabla horizontalmente

PEI_grupos_urbano <- PEI_grupos_urbano |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PEI_grupos_urbano[, sapply(PEI_grupos_urbano, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEI_grupos_urbano <- bind_rows(PEI_grupos_urbano, sumas)

PEI_grupos_urbano <- PEI_grupos_urbano |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Quito rural 

PEI_grupos_rural <- DMQ_rural_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PEI_grupos_rural <- PEI_grupos_rural[,-1]

# Tranformar la tabla horizontalmente

PEI_grupos_rural <- PEI_grupos_rural |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PEI_grupos_rural[, sapply(PEI_grupos_rural, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEI_grupos_rural <- bind_rows(PEI_grupos_rural, sumas)

PEI_grupos_rural <- PEI_grupos_rural |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# Zona DMQ 

PEI_grupos_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(condact, p02, grupos_etarios) |>
  summarise(total = sum(fexp)) |>
  group_by(p02, grupos_etarios) |>
  summarise(total = sum(total)) |>
  mutate(Cantidad = total,
         Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  select(grupos_etarios, Sexo, Cantidad)

PEI_grupos_DMQ <- PEI_grupos_DMQ[,-1]

# Tranformar la tabla horizontalmente

PEI_grupos_DMQ <- PEI_grupos_DMQ |>
  pivot_wider(names_from = Sexo,
              values_from = Cantidad,
              names_sep = "_") |>
  rowwise() |>
  mutate(Total = sum(c_across(Hombres:Mujeres), na.rm=T)) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(PEI_grupos_DMQ[, sapply(PEI_grupos_DMQ, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
PEI_grupos_DMQ <- bind_rows(PEI_grupos_DMQ, sumas)

PEI_grupos_DMQ <- PEI_grupos_DMQ |>
  mutate(grupos_etarios = as.character(grupos_etarios)) |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  mutate(`Grupos etarios` = grupos_etarios) |>
  select(`Grupos etarios`, Total, Mujeres, Hombres)

# IMprimir tablas en documento

#  Quito ciudad
PEI_grupos_tbl_ciudad <- kable(PEI_grupos_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEI_grupos_ciudad), bold = TRUE) |>
  add_header_above(c("PEI por grupos etarios y  por sexo - Quito ciudad" = 4))

# DMQ Urbano
PEI_grupos_tbl_urbano <- kable(PEI_grupos_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEI_grupos_urbano), bold = TRUE) |>
  add_header_above(c("PEI por grupos etarios y  por sexo - DMQ urbano" = 4))

# DMQ rural
PEI_grupos_tbl_rural <- kable(PEI_grupos_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEI_grupos_rural), bold = TRUE) |>
  add_header_above(c("PEI por grupos etarios y por sexo - DMQ rural" = 4))

# todo DMQ
PEI_grupos_tbl_DMQ <- kable(PEI_grupos_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(PEI_grupos_DMQ), bold = TRUE) |>
  add_header_above(c("PEI por grupos etarios y sexo - Zona DMQ" = 4))

PEI_grupos_tbl_ciudad
PEI_grupos_tbl_DMQ
PEI_grupos_tbl_urbano
PEI_grupos_tbl_rural

```

## Condición de Actividad

```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-nrow: 2
#| column: page

# Condiccion de actividad

# Quito ciudad 

CON_ciudad <- DMQ_ciudad |>
  filter(!is.na(condact)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  ungroup() |>
  rename(Cantidad = total,
         Sexo = p02,
         `Categoría` = condact) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres"),
         `Categoría` = recode(`Categoría`,
                              `0` = "Menores de 15 años",
                              `1` = "Empleo Adecuado/Pleno",
                              `2` = "Subempleo por insuficiencia de tiempo de trabajo",
                              `3` = "Subempleo por insuficiencia de ingresos",
                              `4` = "Otro empleo no pleno",
                              `5` = "Empleo no remunerado",
                              `6` = "Empleo no clasificado",
                              `7` = "Desempleo abierto",
                              `8` = "Desempleo oculto",
                              `9` = "Población Económicamente Inactiva")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Categoría`, Sexo, Cantidad, Porcentaje)


CON_ciudad <- CON_ciudad |>
  pivot_wider(names_from = Sexo,
              values_from = c(Cantidad, Porcentaje)) |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres :Porcentaje_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) * 100) |>
  rename(`Cantidad H` = Cantidad_Hombres,
         `Cantidad M` = Cantidad_Mujeres,
         `Porcentaje H`= Porcentaje_Hombres,
         `Porcentaje M` = Porcentaje_Mujeres) |>
  select(`Categoría`, Total, Porcentaje, `Cantidad M`,`Porcentaje M`, `Cantidad H`, `Porcentaje H`) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(CON_ciudad[, sapply(CON_ciudad, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
CON_ciudad <- bind_rows(CON_ciudad, sumas)

CON_ciudad <- CON_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ urbano 

CON_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  ungroup() |>
  rename(Cantidad = total,
         Sexo = p02,
         `Categoría` = condact) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres"),
         `Categoría` = recode(`Categoría`,
                              `0` = "Menores de 15 años",
                              `1` = "Empleo Adecuado/Pleno",
                              `2` = "Subempleo por insuficiencia de tiempo de trabajo",
                              `3` = "Subempleo por insuficiencia de ingresos",
                              `4` = "Otro empleo no pleno",
                              `5` = "Empleo no remunerado",
                              `6` = "Empleo no clasificado",
                              `7` = "Desempleo abierto",
                              `8` = "Desempleo oculto",
                              `9` = "Población Económicamente Inactiva")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Categoría`, Sexo, Cantidad, Porcentaje)


CON_urbano <- CON_urbano |>
  pivot_wider(names_from = Sexo,
              values_from = c(Cantidad, Porcentaje)) |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres :Porcentaje_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) * 100) |>
  rename(`Cantidad H` = Cantidad_Hombres,
         `Cantidad M` = Cantidad_Mujeres,
         `Porcentaje H`= Porcentaje_Hombres,
         `Porcentaje M` = Porcentaje_Mujeres) |>
  select(`Categoría`, Total, Porcentaje, `Cantidad M`,`Porcentaje M`, `Cantidad H`, `Porcentaje H`) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(CON_urbano[, sapply(CON_urbano, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
CON_urbano <- bind_rows(CON_urbano, sumas)

CON_urbano <- CON_urbano |>
  mutate(across(everything(), ~replace_na(., "Total")))


# DMQ rural 

CON_rural <- DMQ_rural_2023 |>
  filter(!is.na(condact)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  ungroup() |>
  rename(Cantidad = total,
         Sexo = p02,
         `Categoría` = condact) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres"),
         `Categoría` = recode(`Categoría`,
                              `0` = "Menores de 15 años",
                              `1` = "Empleo Adecuado/Pleno",
                              `2` = "Subempleo por insuficiencia de tiempo de trabajo",
                              `3` = "Subempleo por insuficiencia de ingresos",
                              `4` = "Otro empleo no pleno",
                              `5` = "Empleo no remunerado",
                              `6` = "Empleo no clasificado",
                              `7` = "Desempleo abierto",
                              `8` = "Desempleo oculto",
                              `9` = "Población Económicamente Inactiva")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Categoría`, Sexo, Cantidad, Porcentaje)


CON_rural <- CON_rural |>
  pivot_wider(names_from = Sexo,
              values_from = c(Cantidad, Porcentaje)) |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres :Porcentaje_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) * 100) |>
  rename(`Cantidad H` = Cantidad_Hombres,
         `Cantidad M` = Cantidad_Mujeres,
         `Porcentaje H`= Porcentaje_Hombres,
         `Porcentaje M` = Porcentaje_Mujeres) |>
  select(`Categoría`, Total, Porcentaje, `Cantidad M`,`Porcentaje M`, `Cantidad H`, `Porcentaje H`) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(CON_rural[, sapply(CON_rural, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
CON_rural <- bind_rows(CON_rural, sumas)

CON_rural <- CON_rural |>
  mutate(across(everything(), ~replace_na(., "Total")))

# DMQ total 

CON_DMQ <- DMQ_2023 |>
  filter(!is.na(condact)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  ungroup() |>
  rename(Cantidad = total,
         Sexo = p02,
         `Categoría` = condact) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres"),
         `Categoría` = recode(`Categoría`,
                              `0` = "Menores de 15 años",
                              `1` = "Empleo Adecuado/Pleno",
                              `2` = "Subempleo por insuficiencia de tiempo de trabajo",
                              `3` = "Subempleo por insuficiencia de ingresos",
                              `4` = "Otro empleo no pleno",
                              `5` = "Empleo no remunerado",
                              `6` = "Empleo no clasificado",
                              `7` = "Desempleo abierto",
                              `8` = "Desempleo oculto",
                              `9` = "Población Económicamente Inactiva")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Categoría`, Sexo, Cantidad, Porcentaje)


CON_DMQ <- CON_DMQ |>
  pivot_wider(names_from = Sexo,
              values_from = c(Cantidad, Porcentaje)) |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres :Porcentaje_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) * 100) |>
  rename(`Cantidad H` = Cantidad_Hombres,
         `Cantidad M` = Cantidad_Mujeres,
         `Porcentaje H`= Porcentaje_Hombres,
         `Porcentaje M` = Porcentaje_Mujeres) |>
  select(`Categoría`, Total, Porcentaje, `Cantidad M`,`Porcentaje M`, `Cantidad H`, `Porcentaje H`) |>
  arrange(desc(Total))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(CON_DMQ[, sapply(CON_DMQ, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
CON_DMQ <- bind_rows(CON_DMQ, sumas)

CON_DMQ <- CON_DMQ |>
  mutate(across(everything(), ~replace_na(., "Total")))



# Imprimir tablas para documento


#  Quito ciudad
CON_tbl_ciudad <- kable(CON_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(CON_ciudad), bold = TRUE) |>
  add_header_above(c("Condición de Actividad por sexo - Quito Ciudad" = 7))

# DMQ Urbano
CON_tbl_urbano <- kable(CON_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(CON_urbano), bold = TRUE) |>
  add_header_above(c("Condición de Actividad por sexo - DMQ urbano" = 7))

# DMQ rural
CON_tbl_rural <- kable(CON_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(CON_rural), bold = TRUE) |>
  add_header_above(c("Condición de Actividad por sexo - DMQ rural" = 7))

# todo DMQ
CON_tbl_DMQ <- kable(CON_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(CON_DMQ), bold = TRUE) |>
  add_header_above(c("Condición de Actividad por sexo - Zona DMQ" = 7))

CON_tbl_ciudad
CON_tbl_DMQ
CON_tbl_urbano
CON_tbl_rural


```


```{r}
#| echo: false
#| message: false
#| warning: false
#| layout-nrow: 2
#| column: page

# Quito ciudad 

CON_PEA_ciudad <- DMQ_ciudad |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  ungroup() |>
  rename(Cantidad = total,
         Sexo = p02,
         `Categoría` = condact) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres"),
         `Categoría` = recode(`Categoría`,
                              `1` = "Empleo Adecuado/Pleno",
                              `2` = "Subempleo por insuficiencia de tiempo de trabajo",
                              `3` = "Subempleo por insuficiencia de ingresos",
                              `4` = "Otro empleo no pleno",
                              `5` = "Empleo no remunerado",
                              `6` = "Empleo no clasificado",
                              `7` = "Desempleo abierto",
                              `8` = "Desempleo oculto")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Categoría`, Sexo, Cantidad, Porcentaje)


CON_PEA_ciudad <- CON_PEA_ciudad |>
  pivot_wider(names_from = Sexo,
              values_from = c(Cantidad, Porcentaje)) |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres :Porcentaje_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) * 100) |>
  rename(`Cantidad H` = Cantidad_Hombres,
         `Cantidad M` = Cantidad_Mujeres,
         `Porcentaje H`= Porcentaje_Hombres,
         `Porcentaje M` = Porcentaje_Mujeres) |>
  select(`Categoría`, Total, Porcentaje, `Cantidad M`,`Porcentaje M`, `Cantidad H`, `Porcentaje H`) 

PEA <- CON_PEA_ciudad |>
  slice(1:8) |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Agregar una fila con los totales en la tercera posición
CON_PEA_ciudad <- CON_PEA_ciudad |>
  add_row(!!!PEA, .before = 1) |>
  mutate(Categoría = ifelse(row_number() == 1, "PEA (Tasa de participación global)", Categoría))

# Ahora obtenemos la tasa de empleo global

CON_empleo_ciudad <- CON_PEA_ciudad |>
  dplyr::filter(`Categoría` %in% c("Empleo Adecuado/Pleno", "Otro empleo no pleno", 
                            "Subempleo por insuficiencia de tiempo de trabajo",
                            "Empleo no remunerado","Subempleo por insuficiencia de ingresos",
                            "Empleo no clasificado")) |>
  summarise(across(where(is.numeric), sum)) |>
  mutate(Total = `Cantidad M` + `Cantidad H`)

# Ahora obtenemos la PET

CON_PET_ciudad <- DMQ_ciudad |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(p02) |>
  summarise(total = sum(fexp)) |>
  mutate(Porcentaje = total / sum(total) * 100) |>
  ungroup() |>
  rename(Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) 

CON_PET_ciudad <- CON_PET_ciudad |>
  pivot_wider(names_from = Sexo,
              values_from = c(total, Porcentaje)) |>
  mutate(Total = total_Hombres +total_Mujeres) |>
  mutate(Porcentaje = Total  / sum(Total) *100) |>
  rename(`Cantidad M` = total_Mujeres,
         `Cantidad H`= total_Hombres, 
         `Porcentaje M` = Porcentaje_Mujeres,
         `Porcentaje H` = Porcentaje_Hombres) |>
  select(Total, Porcentaje, `Cantidad M`, `Porcentaje M` , `Cantidad H`, `Porcentaje H`)

# Ahora obtenemos la PEI

CON_PEI_ciudad <- DMQ_ciudad |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(p02) |>
  summarise(total = sum(fexp)) |>
  mutate(Porcentaje = total / sum(total) * 100) |>
  ungroup() |>
  rename(Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) 

CON_PEI_ciudad <- CON_PEI_ciudad |>
  pivot_wider(names_from = Sexo,
              values_from = c(total, Porcentaje)) |>
  mutate(Total = total_Hombres +total_Mujeres) |>
  mutate(Porcentaje = Total  / sum(Total) *100) |>
  rename(`Cantidad M` = total_Mujeres,
         `Cantidad H`= total_Hombres, 
         `Porcentaje M` = Porcentaje_Mujeres,
         `Porcentaje H` = Porcentaje_Hombres) |>
  select(Total, Porcentaje, `Cantidad M`, `Porcentaje M` , `Cantidad H`, `Porcentaje H`)

# Ahora unimo las cuatro tablas

agregado_ciudad <- bind_rows(CON_PET_ciudad, CON_PEI_ciudad, CON_PEA_ciudad, CON_empleo_ciudad) |>
  select(`Categoría`, everything())

# Cambiar los valores NA manualmente en la primera columna
agregado_ciudad$Categoría[c(1, 2, 12)] <- c("PET", "PEI", "Tasa de empleo global")

# Calcular la suma de las dos filas específicas
suma_fila <- agregado_ciudad |>
  filter(row_number() %in% c(1, 2)) |>
  summarise(across(where(is.numeric), sum)) |>
  mutate(Categoría = "Población total")

# Agregar la fila de suma al principio del tibble
agregado_ciudad <- agregado_ciudad |>
  add_row(suma_fila, .before = 1) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%"))) 

# Obtener las columnas que comienzan con "Porcentaje"
columnas_porcentaje <- grep("^Porcentaje", names(agregado_ciudad), value = TRUE)

# Dejar en blanco los tres primeros valores de cada columna
agregado_ciudad[, columnas_porcentaje] <- lapply(agregado_ciudad[, columnas_porcentaje], function(x) {
  x[1:3] <- ""
  return(x)
})

# DMQ urbano 

CON_PEA_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  ungroup() |>
  rename(Cantidad = total,
         Sexo = p02,
         `Categoría` = condact) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres"),
         `Categoría` = recode(`Categoría`,
                              `1` = "Empleo Adecuado/Pleno",
                              `2` = "Subempleo por insuficiencia de tiempo de trabajo",
                              `3` = "Subempleo por insuficiencia de ingresos",
                              `4` = "Otro empleo no pleno",
                              `5` = "Empleo no remunerado",
                              `6` = "Empleo no clasificado",
                              `7` = "Desempleo abierto",
                              `8` = "Desempleo oculto")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Categoría`, Sexo, Cantidad, Porcentaje)


CON_PEA_urbano <- CON_PEA_urbano |>
  pivot_wider(names_from = Sexo,
              values_from = c(Cantidad, Porcentaje)) |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres :Porcentaje_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) * 100) |>
  rename(`Cantidad H` = Cantidad_Hombres,
         `Cantidad M` = Cantidad_Mujeres,
         `Porcentaje H`= Porcentaje_Hombres,
         `Porcentaje M` = Porcentaje_Mujeres) |>
  select(`Categoría`, Total, Porcentaje, `Cantidad M`,`Porcentaje M`, `Cantidad H`, `Porcentaje H`) 

PEA <- CON_PEA_urbano |>
  slice(1:8) |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Agregar una fila con los totales en la tercera posición
CON_PEA_urbano <- CON_PEA_urbano |>
  add_row(!!!PEA, .before = 1) |>
  mutate(Categoría = ifelse(row_number() == 1, "PEA (Tasa de participación global)", Categoría))



# Ahora obtenemos la tasa de empleo global

CON_empleo_urbano <- CON_PEA_urbano |>
  dplyr::filter(`Categoría` %in% c("Empleo Adecuado/Pleno", "Otro empleo no pleno", 
                            "Subempleo por insuficiencia de tiempo de trabajo",
                            "Empleo no remunerado","Subempleo por insuficiencia de ingresos",
                            "Empleo no clasificado")) |>
  summarise(across(where(is.numeric), sum)) |>
  mutate(Total = `Cantidad M` + `Cantidad H`)

# Ahora obtenemos la PET

CON_PET_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(p02) |>
  summarise(total = sum(fexp)) |>
  mutate(Porcentaje = total / sum(total) * 100) |>
  ungroup() |>
  rename(Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) 

CON_PET_urbano <- CON_PET_urbano |>
  pivot_wider(names_from = Sexo,
              values_from = c(total, Porcentaje)) |>
  mutate(Total = total_Hombres +total_Mujeres) |>
  mutate(Porcentaje = Total  / sum(Total) *100) |>
  rename(`Cantidad M` = total_Mujeres,
         `Cantidad H`= total_Hombres, 
         `Porcentaje M` = Porcentaje_Mujeres,
         `Porcentaje H` = Porcentaje_Hombres) |>
  select(Total, Porcentaje, `Cantidad M`, `Porcentaje M` , `Cantidad H`, `Porcentaje H`)

# Ahora obtenemos la PEI

CON_PEI_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(p02) |>
  summarise(total = sum(fexp)) |>
  mutate(Porcentaje = total / sum(total) * 100) |>
  ungroup() |>
  rename(Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) 

CON_PEI_urbano <- CON_PEI_urbano |>
  pivot_wider(names_from = Sexo,
              values_from = c(total, Porcentaje)) |>
  mutate(Total = total_Hombres +total_Mujeres) |>
  mutate(Porcentaje = Total  / sum(Total) *100) |>
  rename(`Cantidad M` = total_Mujeres,
         `Cantidad H`= total_Hombres, 
         `Porcentaje M` = Porcentaje_Mujeres,
         `Porcentaje H` = Porcentaje_Hombres) |>
  select(Total, Porcentaje, `Cantidad M`, `Porcentaje M` , `Cantidad H`, `Porcentaje H`)

# Ahora unimo las cuatro tablas

agregado_urbano <- bind_rows(CON_PET_urbano, CON_PEI_urbano, CON_PEA_urbano, CON_empleo_urbano) |>
  select(`Categoría`, everything())

# Cambiar los valores NA manualmente en la primera columna
agregado_urbano$Categoría[c(1, 2, 12)] <- c("PET", "PEI", "Tasa de empleo global")

# Calcular la suma de las dos filas específicas
suma_fila <- agregado_urbano |>
  filter(row_number() %in% c(1, 2)) |>
  summarise(across(where(is.numeric), sum)) |>
  mutate(Categoría = "Población total")

# Agregar la fila de suma al principio del tibble
agregado_urbano <- agregado_urbano |>
  add_row(suma_fila, .before = 1)  |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%"))) 

# Obtener las columnas que comienzan con "Porcentaje"
columnas_porcentaje <- grep("^Porcentaje", names(agregado_urbano), value = TRUE)

# Dejar en blanco los tres primeros valores de cada columna
agregado_urbano[, columnas_porcentaje] <- lapply(agregado_urbano[, columnas_porcentaje], function(x) {
  x[1:3] <- ""
  return(x)
})



# DMQ rural 

CON_PEA_rural <- DMQ_rural_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  ungroup() |>
  rename(Cantidad = total,
         Sexo = p02,
         `Categoría` = condact) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres"),
         `Categoría` = recode(`Categoría`,
                              `1` = "Empleo Adecuado/Pleno",
                              `2` = "Subempleo por insuficiencia de tiempo de trabajo",
                              `3` = "Subempleo por insuficiencia de ingresos",
                              `4` = "Otro empleo no pleno",
                              `5` = "Empleo no remunerado",
                              `6` = "Empleo no clasificado",
                              `7` = "Desempleo abierto",
                              `8` = "Desempleo oculto")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Categoría`, Sexo, Cantidad, Porcentaje)


CON_PEA_rural <- CON_PEA_rural |>
  pivot_wider(names_from = Sexo,
              values_from = c(Cantidad, Porcentaje)) |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres :Porcentaje_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) * 100) |>
  rename(`Cantidad H` = Cantidad_Hombres,
         `Cantidad M` = Cantidad_Mujeres,
         `Porcentaje H`= Porcentaje_Hombres,
         `Porcentaje M` = Porcentaje_Mujeres) |>
  select(`Categoría`, Total, Porcentaje, `Cantidad M`,`Porcentaje M`, `Cantidad H`, `Porcentaje H`) 

PEA <- CON_PEA_rural |>
  slice(1:8) |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Agregar una fila con los totales en la tercera posición
CON_PEA_rural <- CON_PEA_rural |>
  add_row(!!!PEA, .before = 1) |>
  mutate(Categoría = ifelse(row_number() == 1, "PEA (Tasa de participación global)", Categoría))


# Ahora obtenemos la tasa de empleo global

CON_empleo_rural <- CON_PEA_rural |>
  dplyr::filter(`Categoría` %in% c("Empleo Adecuado/Pleno", "Otro empleo no pleno", 
                            "Subempleo por insuficiencia de tiempo de trabajo",
                            "Empleo no remunerado","Subempleo por insuficiencia de ingresos",
                            "Empleo no clasificado")) |>
  summarise(across(where(is.numeric), sum)) |>
  mutate(Total = `Cantidad M` + `Cantidad H`)

# Ahora obtenemos la PET

CON_PET_rural <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(p02) |>
  summarise(total = sum(fexp)) |>
  mutate(Porcentaje = total / sum(total) * 100) |>
  ungroup() |>
  rename(Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) 

CON_PET_rural <- CON_PET_rural |>
  pivot_wider(names_from = Sexo,
              values_from = c(total, Porcentaje)) |>
  mutate(Total = total_Hombres +total_Mujeres) |>
  mutate(Porcentaje = Total  / sum(Total) *100) |>
  rename(`Cantidad M` = total_Mujeres,
         `Cantidad H`= total_Hombres, 
         `Porcentaje M` = Porcentaje_Mujeres,
         `Porcentaje H` = Porcentaje_Hombres) |>
  select(Total, Porcentaje, `Cantidad M`, `Porcentaje M` , `Cantidad H`, `Porcentaje H`)

# Ahora obtenemos la PEI

CON_PEI_rural <- DMQ_urbano_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(p02) |>
  summarise(total = sum(fexp)) |>
  mutate(Porcentaje = total / sum(total) * 100) |>
  ungroup() |>
  rename(Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) 

CON_PEI_rural <- CON_PEI_rural |>
  pivot_wider(names_from = Sexo,
              values_from = c(total, Porcentaje)) |>
  mutate(Total = total_Hombres +total_Mujeres) |>
  mutate(Porcentaje = Total  / sum(Total) *100) |>
  rename(`Cantidad M` = total_Mujeres,
         `Cantidad H`= total_Hombres, 
         `Porcentaje M` = Porcentaje_Mujeres,
         `Porcentaje H` = Porcentaje_Hombres) |>
  select(Total, Porcentaje, `Cantidad M`, `Porcentaje M` , `Cantidad H`, `Porcentaje H`)

# Ahora unimo las cuatro tablas

agregado_rural <- bind_rows(CON_PET_rural, CON_PEI_rural, CON_PEA_rural, CON_empleo_rural) |>
  select(`Categoría`, everything())

# Cambiar los valores NA manualmente en la primera columna
agregado_rural$Categoría[c(1, 2, 12)] <- c("PET", "PEI", "Tasa de empleo global")

# Calcular la suma de las dos filas específicas
suma_fila <- agregado_rural |>
  filter(row_number() %in% c(1, 2)) |>
  summarise(across(where(is.numeric), sum)) |>
  mutate(Categoría = "Población total")

# Agregar la fila de suma al principio del tibble
agregado_rural <- agregado_rural |>
  add_row(suma_fila, .before = 1)  |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%"))) 

# Obtener las columnas que comienzan con "Porcentaje"
columnas_porcentaje <- grep("^Porcentaje", names(agregado_rural), value = TRUE)

# Dejar en blanco los tres primeros valores de cada columna
agregado_rural[, columnas_porcentaje] <- lapply(agregado_rural[, columnas_porcentaje], function(x) {
  x[1:3] <- ""
  return(x)
})


# DMQ Total 

CON_PEA_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(1:8)) |>
  group_by(condact, p02) |>
  summarise(total = sum(fexp)) |>
  ungroup() |>
  rename(Cantidad = total,
         Sexo = p02,
         `Categoría` = condact) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres"),
         `Categoría` = recode(`Categoría`,
                              `1` = "Empleo Adecuado/Pleno",
                              `2` = "Subempleo por insuficiencia de tiempo de trabajo",
                              `3` = "Subempleo por insuficiencia de ingresos",
                              `4` = "Otro empleo no pleno",
                              `5` = "Empleo no remunerado",
                              `6` = "Empleo no clasificado",
                              `7` = "Desempleo abierto",
                              `8` = "Desempleo oculto")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Categoría`, Sexo, Cantidad, Porcentaje)


CON_PEA_DMQ <- CON_PEA_DMQ |>
  pivot_wider(names_from = Sexo,
              values_from = c(Cantidad, Porcentaje)) |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres:Porcentaje_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) * 100) |>
  rename(`Cantidad H` = Cantidad_Hombres,
         `Cantidad M` = Cantidad_Mujeres,
         `Porcentaje H`= Porcentaje_Hombres,
         `Porcentaje M` = Porcentaje_Mujeres) |>
  select(`Categoría`, Total, Porcentaje, `Cantidad M`,`Porcentaje M`, `Cantidad H`, `Porcentaje H`)

PEA <- CON_PEA_DMQ |>
  slice(1:8) |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Agregar una fila con los totales en la tercera posición
CON_PEA_DMQ <- CON_PEA_DMQ |>
  add_row(!!!PEA, .before = 1) |>
  mutate(Categoría = ifelse(row_number() == 1, "PEA (Tasa de participación global)", Categoría))



# Ahora obtenemos la tasa de empleo global

CON_empleo_DMQ <- CON_PEA_DMQ |>
  dplyr::filter(`Categoría` %in% c("Empleo Adecuado/Pleno", "Otro empleo no pleno", 
                            "Subempleo por insuficiencia de tiempo de trabajo",
                            "Empleo no remunerado","Subempleo por insuficiencia de ingresos",
                            "Empleo no clasificado")) |>
  summarise(across(where(is.numeric), sum)) |>
  mutate(Total = `Cantidad M` + `Cantidad H`)

# Ahora obtenemos la PET

CON_PET_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(1:9)) |>
  group_by(p02) |>
  summarise(total = sum(fexp)) |>
  mutate(Porcentaje = total / sum(total) * 100) |>
  ungroup() |>
  rename(Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) 

CON_PET_DMQ <- CON_PET_DMQ |>
  pivot_wider(names_from = Sexo,
              values_from = c(total, Porcentaje)) |>
  mutate(Total = total_Hombres +total_Mujeres) |>
  mutate(Porcentaje = Total  / sum(Total) *100) |>
  rename(`Cantidad M` = total_Mujeres,
         `Cantidad H`= total_Hombres, 
         `Porcentaje M` = Porcentaje_Mujeres,
         `Porcentaje H` = Porcentaje_Hombres) |>
  select(Total, Porcentaje, `Cantidad M`, `Porcentaje M` , `Cantidad H`, `Porcentaje H`)

# Ahora obtenemos la PEI

CON_PEI_DMQ <- DMQ_2023 |>
  filter(!is.na(condact) & condact %in% c(9)) |>
  group_by(p02) |>
  summarise(total = sum(fexp)) |>
  mutate(Porcentaje = total / sum(total) * 100) |>
  ungroup() |>
  rename(Sexo = p02) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) 

CON_PEI_DMQ <- CON_PEI_DMQ |>
  pivot_wider(names_from = Sexo,
              values_from = c(total, Porcentaje)) |>
  mutate(Total = total_Hombres +total_Mujeres) |>
  mutate(Porcentaje = Total  / sum(Total) *100) |>
  rename(`Cantidad M` = total_Mujeres,
         `Cantidad H`= total_Hombres, 
         `Porcentaje M` = Porcentaje_Mujeres,
         `Porcentaje H` = Porcentaje_Hombres) |>
  select(Total, Porcentaje, `Cantidad M`, `Porcentaje M` , `Cantidad H`, `Porcentaje H`)

# Ahora unimo las cuatro tablas

agregado_DMQ <- bind_rows(CON_PET_DMQ, CON_PEI_DMQ, CON_PEA_DMQ, CON_empleo_DMQ) |>
  select(`Categoría`, everything())

# Cambiar los valores NA manualmente en la primera columna
agregado_DMQ$Categoría[c(1, 2, 12)] <- c("PET", "PEI", "Tasa de empleo global")

# Calcular la suma de las dos filas específicas
suma_fila <- agregado_DMQ |>
  filter(row_number() %in% c(1, 2)) |>
  summarise(across(where(is.numeric), sum)) |>
  mutate(Categoría = "Población total")

# Agregar la fila de suma al principio del tibble
agregado_DMQ <- agregado_DMQ |>
  add_row(suma_fila, .before = 1)  |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%"))) 

# Obtener las columnas que comienzan con "Porcentaje"
columnas_porcentaje <- grep("^Porcentaje", names(agregado_DMQ), value = TRUE)

# Dejar en blanco los tres primeros valores de cada columna
agregado_DMQ[, columnas_porcentaje] <- lapply(agregado_DMQ[, columnas_porcentaje], function(x) {
  x[1:3] <- ""
  return(x)
})


# Ahora imprimimos las tablas


#  Quito ciudad
agregado_tbl_ciudad <- kable(agregado_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  )  |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(c(1,4), bold = TRUE)|>
  add_header_above(c("Quito ciudad" = 7))

# DMQ Urbano
agregado_tbl_urbano <- kable(agregado_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(c(1,4), bold = TRUE)|>
  add_header_above(c("DMQ Urbano" = 7))

# DMQ rural
agregado_tbl_rural <- kable(agregado_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(c(1,4), bold = TRUE)|>
  add_header_above(c("DMQ Rural" = 7))

# todo DMQ
agregado_tbl_DMQ <- kable(agregado_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(c(1,3), bold = TRUE)|>
  add_header_above(c("Zona DMQ" = 7))

agregado_tbl_ciudad
agregado_tbl_DMQ
agregado_tbl_urbano
agregado_tbl_rural

```

## Condición de Inactividad

```{r}
#| eval: true
#| message: false
#| warning: false
#| echo: false



# Quito ciudad 

INAC_ciudad <- DMQ_ciudad |>
  filter(!is.na(p36)) |>
  group_by(p36, p02) |>
  summarise(total = sum(fexp)) |>
  rename(Cantidad = total,
         Sexo = p02,
         `Condición de Inactividad` = p36) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(`Condición de Inactividad` = recode(`Condición de Inactividad`,
                                             `1` = "Rentista",
                                             `2` = "Jubilado pensión",
                                             `3` = "Estudiante",
                                             `4` = "Ama de casa",
                                             `5` = "Incapacitado",
                                             `6` = "Otro")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Condición de Inactividad`, Sexo, Cantidad, Porcentaje)

# Ampliar la tabla horizontalmente

INAC_ciudad <- INAC_ciudad |>
  pivot_wider(names_from = Sexo,
           values_from = c(Cantidad, Porcentaje))  |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres:Cantidad_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) *100) |>
  select(`Condición de Inactividad`, Total, Porcentaje, Cantidad_Mujeres,
         Porcentaje_Mujeres, Cantidad_Hombres,Porcentaje_Hombres) |>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%"))) |>
  arrange(desc(Total))


# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- INAC_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
INAC_ciudad <- bind_rows(INAC_ciudad, sumas)

INAC_ciudad <- INAC_ciudad |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  rename(`Cantidad M` = Cantidad_Mujeres, 
        `Porcentaje M` =  Porcentaje_Mujeres,
         `Cantidad H` = Cantidad_Hombres,
         `Porcentaje H` = Porcentaje_Hombres)

# DMQ urbano 
INAC_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(p36)) |>
  group_by(p36, p02) |>
  summarise(total = sum(fexp)) |>
  rename(Cantidad = total,
         Sexo = p02,
         `Condición de Inactividad` = p36) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(`Condición de Inactividad` = recode(`Condición de Inactividad`,
                                             `1` = "Rentista",
                                             `2` = "Jubilado pensión",
                                             `3` = "Estudiante",
                                             `4` = "Ama de casa",
                                             `5` = "Incapacitado",
                                             `6` = "Otro")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Condición de Inactividad`, Sexo, Cantidad, Porcentaje)

# Ampliar la tabla horizontalmente

INAC_urbano <- INAC_urbano |>
  pivot_wider(names_from = Sexo,
           values_from = c(Cantidad, Porcentaje))  |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres:Cantidad_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) *100) |>
  select(`Condición de Inactividad`, Total, Porcentaje, Cantidad_Mujeres,
         Porcentaje_Mujeres, Cantidad_Hombres,Porcentaje_Hombres)|>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%"))) |>
  arrange(desc(Total))


# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- INAC_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
INAC_urbano <- bind_rows(INAC_urbano, sumas)

INAC_urbano <- INAC_urbano |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  rename(`Cantidad M` = Cantidad_Mujeres, 
        `Porcentaje M` =  Porcentaje_Mujeres,
         `Cantidad H` = Cantidad_Hombres,
         `Porcentaje H` = Porcentaje_Hombres) 

# DMQ rural

INAC_rural <- DMQ_rural_2023 |>
  filter(!is.na(p36)) |>
  group_by(p36, p02) |>
  summarise(total = sum(fexp)) |>
  rename(Cantidad = total,
         Sexo = p02,
         `Condición de Inactividad` = p36) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(`Condición de Inactividad` = recode(`Condición de Inactividad`,
                                             `1` = "Rentista",
                                             `2` = "Jubilado pensión",
                                             `3` = "Estudiante",
                                             `4` = "Ama de casa",
                                             `5` = "Incapacitado",
                                             `6` = "Otro")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Condición de Inactividad`, Sexo, Cantidad, Porcentaje)

# Ampliar la tabla horizontalmente

INAC_rural <- INAC_rural |>
  pivot_wider(names_from = Sexo,
           values_from = c(Cantidad, Porcentaje))  |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres:Cantidad_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) *100) |>
  select(`Condición de Inactividad`, Total, Porcentaje, Cantidad_Mujeres,
         Porcentaje_Mujeres, Cantidad_Hombres,Porcentaje_Hombres)|>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%"))) |>
  arrange(desc(Total))


# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- INAC_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
INAC_rural <- bind_rows(INAC_rural, sumas)

INAC_rural <- INAC_rural |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  rename(`Cantidad M` = Cantidad_Mujeres, 
        `Porcentaje M` =  Porcentaje_Mujeres,
         `Cantidad H` = Cantidad_Hombres,
         `Porcentaje H` = Porcentaje_Hombres) 


# DMQ total 

INAC_DMQ <- DMQ_2023 |>
  filter(!is.na(p36)) |>
  group_by(p36, p02) |>
  summarise(total = sum(fexp)) |>
  rename(Cantidad = total,
         Sexo = p02,
         `Condición de Inactividad` = p36) |>
  mutate(Sexo = recode(Sexo,
                       `1` = "Hombres",
                       `2` = "Mujeres")) |>
  mutate(`Condición de Inactividad` = recode(`Condición de Inactividad`,
                                             `1` = "Rentista",
                                             `2` = "Jubilado pensión",
                                             `3` = "Estudiante",
                                             `4` = "Ama de casa",
                                             `5` = "Incapacitado",
                                             `6` = "Otro")) |>
  mutate(Porcentaje = Cantidad / sum(Cantidad) *100) |>
  select(`Condición de Inactividad`, Sexo, Cantidad, Porcentaje)

# Ampliar la tabla horizontalmente

INAC_DMQ <- INAC_DMQ |>
  pivot_wider(names_from = Sexo,
           values_from = c(Cantidad, Porcentaje))  |>
  rowwise() |>
  mutate(Total =   sum(c_across(Cantidad_Hombres:Cantidad_Mujeres), na.rm = TRUE)) |>
  ungroup() |>
  mutate(Porcentaje = Total / sum(Total) *100) |>
  select(`Condición de Inactividad`, Total, Porcentaje, Cantidad_Mujeres,
         Porcentaje_Mujeres, Cantidad_Hombres,Porcentaje_Hombres)|>
  mutate(across(contains("Porcentaje"), ~ paste0(formatC(., format = "f", digits = 2, decimal.mark = ","), "%"))) |>
  arrange(desc(Total))


# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- INAC_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
INAC_DMQ <- bind_rows(INAC_DMQ, sumas)

INAC_DMQ <- INAC_DMQ |>
  mutate(across(everything(), ~replace_na(., "Total"))) |>
  rename(`Cantidad M` = Cantidad_Mujeres, 
        `Porcentaje M` =  Porcentaje_Mujeres,
         `Cantidad H` = Cantidad_Hombres,
         `Porcentaje H` = Porcentaje_Hombres)

# Agregamos las tablas para imprimir en el documento


#  Quito ciudad
INAC_tbl_ciudad <- kable(INAC_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "Principales razones de inactividad por sexo",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(INAC_ciudad), bold = TRUE) |>
  add_header_above(c("Quito ciudad" = 7))

# DMQ Urbano
INAC_tbl_urbano <- kable(INAC_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "Principales razones de inactividad por sexo",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(INAC_urbano), bold = TRUE) |>
  add_header_above(c("DMQ urbano" = 7))

# DMQ rural
INAC_tbl_rural <- kable(INAC_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "Principales razones de inactividad por sexo",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(INAC_rural), bold = TRUE) |>
  add_header_above(c("DMQ rural" = 7))

# todo DMQ
INAC_tbl_DMQ <- kable(INAC_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "Principales razones de inactividad por sexo",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(INAC_DMQ), bold = TRUE) |>
  add_header_above(c("Zona DMQ" = 7))

INAC_tbl_ciudad
INAC_tbl_DMQ
INAC_tbl_urbano
INAC_tbl_rural

```

## Actividades Económicas

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page


# Porcentaje de personas vinculadas a los sectores que dan empleo por área

# Quito ciudad

Ac_Ec_ciudad_rama <- DMQ_ciudad |>
  filter(!is.na(rama1)) |>
  group_by(rama1) |>
  summarise(`Total C` = sum(fexp)) |>
  rename(`Rama de Actividad CIIU4` = rama1) |>
  mutate(`Rama de Actividad CIIU4` =  recode(`Rama de Actividad CIIU4`,
                              `10` = "Información y comunicación",
                              `1` = "Agricultura, ganadería caza y silvicultura y pesca",
                              `2` = "Explotación de minas y canteras",
                              `3` = "Industrias manufactureras",
                              `4` = "Suministros de electricidad, gas, aire acondicionado",
                              `5` = "Distribución de agua, alcantarillado",
                              `6` = "Construcción",
                              `7` = "Comercio, reparación vehículos",
                              `8` = "Transporte y almacenamiento",
                              `9` = "Actividades de alojamiento y servicios de comida",
                              `11` = "Actividades financieras y de seguros",
                              `12` = "Actividades inmobiliarias",
                              `13` = "Actividades profesionales, científicas y técnicas",
                              `14` = "Actividades y servicios administrativos y de apoyo",
                              `15` = "Administración pública, defensa y seguridad social",
                              `16` = "Enseñanza",
                              `17` = "Actividades, servicios sociales y de salud",
                              `18` = "Artes, entretenimiento y recreación",
                              `19` = "Otras actividades de servicios",
                              `20` = "Actividades en hogares privados con servicio doméstico",
                              `21` = "Actividades de organizaciones extraterritoriales",
                              `22` = "No especificado"))  |>
  
  
  mutate(`Porcentaje C` = `Total C` / sum(`Total C`) *100) 



# Porcentaje de personas vinculadas a los sectores que dan empleo por área

# DMQ urbano

Ac_Ec_urbano_rama <- DMQ_urbano_2023 |>
  filter(!is.na(rama1)) |>
  group_by(rama1) |>
  summarise(`Total C` = sum(fexp)) |>
  rename(`Rama de Actividad CIIU4` = rama1) |>
  mutate(`Rama de Actividad CIIU4` =  recode(`Rama de Actividad CIIU4`,
                              `10` = "Información y comunicación",
                              `1` = "Agricultura, ganadería caza y silvicultura y pesca",
                              `2` = "Explotación de minas y canteras",
                              `3` = "Industrias manufactureras",
                              `4` = "Suministros de electricidad, gas, aire acondicionado",
                              `5` = "Distribución de agua, alcantarillado",
                              `6` = "Construcción",
                              `7` = "Comercio, reparación vehículos",
                              `8` = "Transporte y almacenamiento",
                              `9` = "Actividades de alojamiento y servicios de comida",
                              `11` = "Actividades financieras y de seguros",
                              `12` = "Actividades inmobiliarias",
                              `13` = "Actividades profesionales, científicas y técnicas",
                              `14` = "Actividades y servicios administrativos y de apoyo",
                              `15` = "Administración pública, defensa y seguridad social",
                              `16` = "Enseñanza",
                              `17` = "Actividades, servicios sociales y de salud",
                              `18` = "Artes, entretenimiento y recreación",
                              `19` = "Otras actividades de servicios",
                              `20` = "Actividades en hogares privados con servicio doméstico",
                              `21` = "Actividades de organizaciones extraterritoriales",
                              `22` = "No especificado"))  |>
  
  
  mutate(`Porcentaje C` = `Total C` / sum(`Total C`) *100)


# Porcentaje de personas vinculadas a los sectores que dan empleo por área

# DMQ rural

Ac_Ec_rural_rama <- DMQ_rural_2023 |>
  filter(!is.na(rama1)) |>
  group_by(rama1) |>
  summarise(`Total C` = sum(fexp)) |>
  rename(`Rama de Actividad CIIU4` = rama1) |>
  mutate(`Rama de Actividad CIIU4` =  recode(`Rama de Actividad CIIU4`,
                              `10` = "Información y comunicación",
                              `1` = "Agricultura, ganadería caza y silvicultura y pesca",
                              `2` = "Explotación de minas y canteras",
                              `3` = "Industrias manufactureras",
                              `4` = "Suministros de electricidad, gas, aire acondicionado",
                              `5` = "Distribución de agua, alcantarillado",
                              `6` = "Construcción",
                              `7` = "Comercio, reparación vehículos",
                              `8` = "Transporte y almacenamiento",
                              `9` = "Actividades de alojamiento y servicios de comida",
                              `11` = "Actividades financieras y de seguros",
                              `12` = "Actividades inmobiliarias",
                              `13` = "Actividades profesionales, científicas y técnicas",
                              `14` = "Actividades y servicios administrativos y de apoyo",
                              `15` = "Administración pública, defensa y seguridad social",
                              `16` = "Enseñanza",
                              `17` = "Actividades, servicios sociales y de salud",
                              `18` = "Artes, entretenimiento y recreación",
                              `19` = "Otras actividades de servicios",
                              `20` = "Actividades en hogares privados con servicio doméstico",
                              `21` = "Actividades de organizaciones extraterritoriales",
                              `22` = "No especificado"))  |>
  
  
  mutate(`Porcentaje C` = `Total C` / sum(`Total C`) *100) 


# Porcentaje de personas vinculadas a los sectores que dan empleo por área

# DMQ Total

Ac_Ec_DMQ_rama <- DMQ_2023 |>
  filter(!is.na(rama1)) |>
  group_by(rama1) |>
  summarise(`Total C` = sum(fexp)) |>
  rename(`Rama de Actividad CIIU4` = rama1) |>
  mutate(`Rama de Actividad CIIU4` =  recode(`Rama de Actividad CIIU4`,
                              `10` = "Información y comunicación",
                              `1` = "Agricultura, ganadería caza y silvicultura y pesca",
                              `2` = "Explotación de minas y canteras",
                              `3` = "Industrias manufactureras",
                              `4` = "Suministros de electricidad, gas, aire acondicionado",
                              `5` = "Distribución de agua, alcantarillado",
                              `6` = "Construcción",
                              `7` = "Comercio, reparación vehículos",
                              `8` = "Transporte y almacenamiento",
                              `9` = "Actividades de alojamiento y servicios de comida",
                              `11` = "Actividades financieras y de seguros",
                              `12` = "Actividades inmobiliarias",
                              `13` = "Actividades profesionales, científicas y técnicas",
                              `14` = "Actividades y servicios administrativos y de apoyo",
                              `15` = "Administración pública, defensa y seguridad social",
                              `16` = "Enseñanza",
                              `17` = "Actividades, servicios sociales y de salud",
                              `18` = "Artes, entretenimiento y recreación",
                              `19` = "Otras actividades de servicios",
                              `20` = "Actividades en hogares privados con servicio doméstico",
                              `21` = "Actividades de organizaciones extraterritoriales",
                              `22` = "No especificado"))  |>
  
  
  mutate(`Porcentaje C` = `Total C` / sum(`Total C`) *100) 

# Unir las tablas

# Crea una lista con las tablas que deseas combinar
lista_tablas <- list(Ac_Ec_ciudad_rama, Ac_Ec_urbano_rama, Ac_Ec_rural_rama, Ac_Ec_DMQ_rama)

# Combina las tablas utilizando merge y reduce de purrr
rama <- reduce(lista_tablas, ~merge(.x, .y, by = "Rama de Actividad CIIU4", all = TRUE))

# Cambiar los nombres de las columnas
nuevos_nombres <- make.unique(names(rama))

names(rama) <- nuevos_nombres

rama <- rama |>
  rename(`Total C` = `Total C.x`,
         `Porcentaje C` = `Porcentaje C.x`,
         `Total U` = `Total C.y`,
         `Porcentaje U` = `Porcentaje C.y`,
         `Total R`= `Total C.x.1`,
         `Porcentaje R` = `Porcentaje C.x.1`,
         `Total DMQ` = `Total C.y.1`,
         `Porcentaje DMQ` = `Porcentaje C.y.1`) |>
  arrange(desc(`Porcentaje DMQ`))


rama <- rama |>
  mutate(across(where(is.numeric), ~if_else(is.na(.), 0, .)))

# Primero, calculamos las sumas de las columnas numéricas
sumas <- colSums(rama[, sapply(rama, is.numeric)])

# Creamos una nueva fila con las sumas y la añadimos al dataframe
rama <- bind_rows(rama, sumas)

rama$`Rama de Actividad CIIU4`[length(rama$`Rama de Actividad CIIU4`)] <- "Total"

# Imprimir tabla para documento htlm

#  Quito ciudad
rama_tbl_ciudad <- kable(rama,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "Porcentaje de personas vinculadas a los sectores que dan empleo por área",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(rama), bold = TRUE) |>
  add_header_above(c(" " = 1, "Quito ciudad" = 2, "DMQ urbano" = 2, 
                     "DMQ rural" = 2, "Zona DMQ" = 2))


rama_tbl_ciudad

```


```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

# Quito ciudad 

Ac_Ec_ciudad <- DMQ_ciudad %>%
  filter(!is.na(rama1)) %>%
  group_by(secemp, rama1) %>%
  summarise(total = sum(fexp)) %>%
  rename(`Rama de Actividad CIIU4` = rama1,
         Sector = secemp) %>%
  mutate(`Rama de Actividad CIIU4` =  recode(`Rama de Actividad CIIU4`,
                              `10` = "Información y comunicación",
                              `1` = "Agricultura, ganadería caza y silvicultura y pesca",
                              `2` = "Explotación de minas y canteras",
                              `3` = "Industrias manufactureras",
                              `4` = "Suministros de electricidad, gas, aire acondicionado",
                              `5` = "Distribución de agua, alcantarillado",
                              `6` = "Construcción",
                              `7` = "Comercio, reparación vehículos",
                              `8` = "Transporte y almacenamiento",
                              `9` = "Actividades de alojamiento y servicios de comida",
                              `11` = "Actividades financieras y de seguros",
                              `12` = "Actividades inmobiliarias",
                              `13` = "Actividades profesionales, científicas y técnicas",
                              `14` = "Actividades y servicios administrativos y de apoyo",
                              `15` = "Administración pública, defensa y seguridad social",
                              `16` = "Enseñanza",
                              `17` = "Actividades, servicios sociales y de salud",
                              `18` = "Artes, entretenimiento y recreación",
                              `19` = "Otras actividades de servicios",
                              `20` = "Actividades en hogares privados con servicio doméstico",
                              `21` = "Actividades de organizaciones extraterritoriales",
                              `22` = "No especificado")) %>%
  mutate(Sector = recode(Sector,
                                             `1` = "Sector Formal",
                                             `2` = "Sector Informal",
                                             `3` = "Empleo Doméstico",
                                             `4` = "No Clasificados por Sector")) %>%
  
  
  mutate(Porcentaje = sprintf("%.2f%%", total / sum(total) * 100))  %>%
  mutate(Porcentaje = gsub("\\.", ",", Porcentaje)) 

# Ampliar la tabla horizontalmente

Ac_Ec_ciudad <- Ac_Ec_ciudad %>%
  pivot_wider(names_from = Sector,
           values_from = c(total, Porcentaje)) %>%
  mutate(`Total general` =   rowSums(select(., starts_with("total_"), num_range("total_", 2:5)), na.rm = TRUE)) %>%
  ungroup() %>%
  rename(`Total SF`= "total_Sector Formal",
         `Total SI`= "total_Sector Informal",
         `Total ED`= "total_Empleo Doméstico",
         `Total NC` = "total_No Clasificados por Sector",
         `Porcentaje SF` = "Porcentaje_Sector Formal",
         `Porcentaje SI` = "Porcentaje_Sector Informal",
         `Porcentaje ED`= "Porcentaje_Empleo Doméstico",
         `Porcentaje NC` = "Porcentaje_No Clasificados por Sector") %>%
  select(`Rama de Actividad CIIU4`,`Total SF`, `Porcentaje SF` ,
         `Total SI`, `Porcentaje SI`,`Total ED`,`Porcentaje ED`,`Total NC`,
         `Porcentaje NC`, `Total general`) 


# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- Ac_Ec_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
Ac_Ec_ciudad <- bind_rows(Ac_Ec_ciudad, sumas)

Ac_Ec_ciudad$`Rama de Actividad CIIU4`[nrow(Ac_Ec_ciudad)] <- "Total"  

# Reemplazar NA por ""
Ac_Ec_ciudad <- map_df(Ac_Ec_ciudad, ~replace(.x, is.na(.x), ""))


# Convertir todas las variables a numéricas excepto Variable_a_no_convertir
Ac_Ec_ciudad <- Ac_Ec_ciudad |>
  mutate(across(starts_with("Total"), ~ {
    num <- as.numeric(ifelse(. == "", "0", .))
    formateado <- sprintf("%.2f", num)
    formateado <- format(as.numeric(formateado), big.mark = ".", decimal.mark = ",")
    formateado
  }))

# DMQ urbano 

Ac_Ec_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(rama1)) |>
  group_by(secemp, rama1) |>
  summarise(total = sum(fexp)) |>
  rename(`Rama de Actividad CIIU4` = rama1,
         Sector = secemp) |>
  mutate(`Rama de Actividad CIIU4` =  recode(`Rama de Actividad CIIU4`,
                              `10` = "Información y comunicación",
                              `1` = "Agricultura, ganadería caza y silvicultura y pesca",
                              `2` = "Explotación de minas y canteras",
                              `3` = "Industrias manufactureras",
                              `4` = "Suministros de electricidad, gas, aire acondicionado",
                              `5` = "Distribución de agua, alcantarillado",
                              `6` = "Construcción",
                              `7` = "Comercio, reparación vehículos",
                              `8` = "Transporte y almacenamiento",
                              `9` = "Actividades de alojamiento y servicios de comida",
                              `11` = "Actividades financieras y de seguros",
                              `12` = "Actividades inmobiliarias",
                              `13` = "Actividades profesionales, científicas y técnicas",
                              `14` = "Actividades y servicios administrativos y de apoyo",
                              `15` = "Administración pública, defensa y seguridad social",
                              `16` = "Enseñanza",
                              `17` = "Actividades, servicios sociales y de salud",
                              `18` = "Artes, entretenimiento y recreación",
                              `19` = "Otras actividades de servicios",
                              `20` = "Actividades en hogares privados con servicio doméstico",
                              `21` = "Actividades de organizaciones extraterritoriales",
                              `22` = "No especificado")) |>
  mutate(Sector = recode(Sector,
                                             `1` = "Sector Formal",
                                             `2` = "Sector Informal",
                                             `3` = "Empleo Doméstico",
                                             `4` = "No Clasificados por Sector")) |>
  
  
  mutate(Porcentaje =  sprintf("%.2f%%", total / sum(total) * 100))  |>
  mutate(Porcentaje = gsub("\\.", ",", Porcentaje))

# Ampliar la tabla horizontalmente

Ac_Ec_urbano <- Ac_Ec_urbano %>%
  pivot_wider(names_from = Sector,
           values_from = c(total, Porcentaje)) %>%
  mutate(`Total general` =   rowSums(select(., starts_with("total_"), num_range("total_", 2:5)), na.rm = TRUE)) %>%
  ungroup() %>%
  rename(`Total SF`= "total_Sector Formal",
         `Total SI`= "total_Sector Informal",
         `Total ED`= "total_Empleo Doméstico",
         `Total NC` = "total_No Clasificados por Sector",
         `Porcentaje SF` = "Porcentaje_Sector Formal",
         `Porcentaje SI` = "Porcentaje_Sector Informal",
         `Porcentaje ED`= "Porcentaje_Empleo Doméstico",
         `Porcentaje NC` = "Porcentaje_No Clasificados por Sector") %>%
  select(`Rama de Actividad CIIU4`,`Total SF`, `Porcentaje SF` ,
         `Total SI`, `Porcentaje SI`,`Total ED`,`Porcentaje ED`,`Total NC`,
         `Porcentaje NC`, `Total general`) 


# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- Ac_Ec_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
Ac_Ec_urbano <- bind_rows(Ac_Ec_urbano, sumas)

Ac_Ec_urbano$`Rama de Actividad CIIU4`[nrow(Ac_Ec_urbano)] <- "Total"  

# Reemplazar NA por blancos
Ac_Ec_urbano <-  map_df(Ac_Ec_urbano, ~replace(.x, is.na(.x), ""))

# Convertir todas las variables a numéricas excepto Variable_a_no_convertir
Ac_Ec_urbano <- Ac_Ec_urbano |>
  mutate(across(starts_with("Total"), ~ {
    num <- as.numeric(ifelse(. == "", "0", .))
    formateado <- sprintf("%.2f", num)
    formateado <- format(as.numeric(formateado), big.mark = ".", decimal.mark = ",")
    formateado
  }))


# DMQ rural 

Ac_Ec_rural <- DMQ_rural_2023 |>
  filter(!is.na(rama1)) |>
  group_by(secemp, rama1) |>
  summarise(total = sum(fexp)) |>
  rename(`Rama de Actividad CIIU4` = rama1,
         Sector = secemp) |>
  mutate(`Rama de Actividad CIIU4` =  recode(`Rama de Actividad CIIU4`,
                              `10` = "Información y comunicación",
                              `1` = "Agricultura, ganadería caza y silvicultura y pesca",
                              `2` = "Explotación de minas y canteras",
                              `3` = "Industrias manufactureras",
                              `4` = "Suministros de electricidad, gas, aire acondicionado",
                              `5` = "Distribución de agua, alcantarillado",
                              `6` = "Construcción",
                              `7` = "Comercio, reparación vehículos",
                              `8` = "Transporte y almacenamiento",
                              `9` = "Actividades de alojamiento y servicios de comida",
                              `11` = "Actividades financieras y de seguros",
                              `12` = "Actividades inmobiliarias",
                              `13` = "Actividades profesionales, científicas y técnicas",
                              `14` = "Actividades y servicios administrativos y de apoyo",
                              `15` = "Administración pública, defensa y seguridad social",
                              `16` = "Enseñanza",
                              `17` = "Actividades, servicios sociales y de salud",
                              `18` = "Artes, entretenimiento y recreación",
                              `19` = "Otras actividades de servicios",
                              `20` = "Actividades en hogares privados con servicio doméstico",
                              `21` = "Actividades de organizaciones extraterritoriales",
                              `22` = "No especificado")) |>
  mutate(Sector = recode(Sector,
                                             `1` = "Sector Formal",
                                             `2` = "Sector Informal",
                                             `3` = "Empleo Doméstico",
                                             `4` = "No Clasificados por Sector")) |>
  
  
  mutate(Porcentaje =  sprintf("%.2f%%", total / sum(total) * 100))  |>
  mutate(Porcentaje = gsub("\\.", ",", Porcentaje))

# Ampliar la tabla horizontalmente

Ac_Ec_rural <- Ac_Ec_rural %>%
  pivot_wider(names_from = Sector,
           values_from = c(total, Porcentaje)) %>%
  mutate(`Total general` =   rowSums(select(., starts_with("total_"), num_range("total_", 2:5)), na.rm = TRUE)) %>%
  ungroup() %>%
  rename(`Total SF`= "total_Sector Formal",
         `Total SI`= "total_Sector Informal",
         `Total ED`= "total_Empleo Doméstico",
         `Total NC` = "total_No Clasificados por Sector",
         `Porcentaje SF` = "Porcentaje_Sector Formal",
         `Porcentaje SI` = "Porcentaje_Sector Informal",
         `Porcentaje ED`= "Porcentaje_Empleo Doméstico",
         `Porcentaje NC` = "Porcentaje_No Clasificados por Sector") %>%
  select(`Rama de Actividad CIIU4`,`Total SF`, `Porcentaje SF` ,
         `Total SI`, `Porcentaje SI`,`Total ED`,`Porcentaje ED`,`Total NC`,
         `Porcentaje NC`, `Total general`) 


# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- Ac_Ec_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
Ac_Ec_rural <- bind_rows(Ac_Ec_rural, sumas)

Ac_Ec_rural$`Rama de Actividad CIIU4`[nrow(Ac_Ec_rural)] <- "Total"  

# Reemplazar NA por blancos
Ac_Ec_rural <-  map_df(Ac_Ec_rural, ~replace(.x, is.na(.x), ""))

# Convertir todas las variables a numéricas excepto Variable_a_no_convertir
Ac_Ec_rural <- Ac_Ec_rural |>
  mutate(across(starts_with("Total"), ~ {
    num <- as.numeric(ifelse(. == "", "0", .))
    formateado <- sprintf("%.2f", num)
    formateado <- format(as.numeric(formateado), big.mark = ".", decimal.mark = ",")
    formateado
  }))


# DMQ total

Ac_Ec_DMQ <- DMQ_2023 |>
  filter(!is.na(rama1)) |>
  group_by(secemp, rama1) |>
  summarise(total = sum(fexp)) |>
  rename(`Rama de Actividad CIIU4` = rama1,
         Sector = secemp) |>
  mutate(`Rama de Actividad CIIU4` =  recode(`Rama de Actividad CIIU4`,
                              `10` = "Información y comunicación",
                              `1` = "Agricultura, ganadería caza y silvicultura y pesca",
                              `2` = "Explotación de minas y canteras",
                              `3` = "Industrias manufactureras",
                              `4` = "Suministros de electricidad, gas, aire acondicionado",
                              `5` = "Distribución de agua, alcantarillado",
                              `6` = "Construcción",
                              `7` = "Comercio, reparación vehículos",
                              `8` = "Transporte y almacenamiento",
                              `9` = "Actividades de alojamiento y servicios de comida",
                              `11` = "Actividades financieras y de seguros",
                              `12` = "Actividades inmobiliarias",
                              `13` = "Actividades profesionales, científicas y técnicas",
                              `14` = "Actividades y servicios administrativos y de apoyo",
                              `15` = "Administración pública, defensa y seguridad social",
                              `16` = "Enseñanza",
                              `17` = "Actividades, servicios sociales y de salud",
                              `18` = "Artes, entretenimiento y recreación",
                              `19` = "Otras actividades de servicios",
                              `20` = "Actividades en hogares privados con servicio doméstico",
                              `21` = "Actividades de organizaciones extraterritoriales",
                              `22` = "No especificado")) |>
  mutate(Sector = recode(Sector,
                                             `1` = "Sector Formal",
                                             `2` = "Sector Informal",
                                             `3` = "Empleo Doméstico",
                                             `4` = "No Clasificados por Sector")) |>
  
  
  mutate(Porcentaje = sprintf("%.2f%%", total / sum(total) * 100)) |>
  mutate(Porcentaje = gsub("\\.", ",", Porcentaje)) 

# Ampliar la tabla horizontalmente

Ac_Ec_DMQ <- Ac_Ec_DMQ %>%
  pivot_wider(names_from = Sector,
           values_from = c(total, Porcentaje)) %>%
  mutate(`Total general` =   rowSums(select(., starts_with("total_"), num_range("total_", 2:5)), na.rm = TRUE)) %>%
  ungroup() %>%
  rename(`Total SF`= "total_Sector Formal",
         `Total SI`= "total_Sector Informal",
         `Total ED`= "total_Empleo Doméstico",
         `Total NC` = "total_No Clasificados por Sector",
         `Porcentaje SF` = "Porcentaje_Sector Formal",
         `Porcentaje SI` = "Porcentaje_Sector Informal",
         `Porcentaje ED`= "Porcentaje_Empleo Doméstico",
         `Porcentaje NC` = "Porcentaje_No Clasificados por Sector") %>%
  select(`Rama de Actividad CIIU4`,`Total SF`, `Porcentaje SF` ,
         `Total SI`, `Porcentaje SI`,`Total ED`,`Porcentaje ED`,`Total NC`,
         `Porcentaje NC`, `Total general`) 


# Agregar la fila de totales 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- Ac_Ec_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
Ac_Ec_DMQ <- bind_rows(Ac_Ec_DMQ, sumas)

Ac_Ec_DMQ$`Rama de Actividad CIIU4`[nrow(Ac_Ec_DMQ)] <- "Total"  

# Reemplazar NA por blancos
Ac_Ec_DMQ <-  map_df(Ac_Ec_DMQ, ~replace(.x, is.na(.x), ""))

# Convertir todas las variables a numéricas excepto Variable_a_no_convertir
Ac_Ec_DMQ <- Ac_Ec_DMQ |>
  mutate(across(starts_with("Total"), ~ {
    num <- as.numeric(ifelse(. == "", "0", .))
    formateado <- sprintf("%.2f", num)
    formateado <- format(as.numeric(formateado), big.mark = ".", decimal.mark = ",")
    formateado
  }))

# Imprimir las tablas para el documento


#  Quito ciudad
Ac_Ec_tbl_ciudad <- kable(Ac_Ec_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "SECTORIZACIÓN DE LOS EMPLEADOS - QUITO CIUDAD",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(Ac_Ec_ciudad), bold = TRUE) |>
  add_header_above(c(" " = 1, "Sector formal" = 2, "Sector informal" = 2,
                     "Empleo doméstico" = 2, "No clasificado" = 2, " " = 1))

# DMQ Urbano
Ac_Ec_tbl_urbano <- kable(Ac_Ec_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "SECTORIZACIÓN DE LOS EMPLEADOS - DMQ URBANO",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(Ac_Ec_urbano), bold = TRUE) |>
  add_header_above(c(" " = 1, "Sector formal" = 2, "Sector informal" = 2,
                     "Empleo doméstico" = 2, "No clasificado" = 2, " " = 1))

# DMQ rural
Ac_Ec_tbl_rural <- kable(Ac_Ec_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "SECTORIZACIÓN DE LOS EMPLEADOS - DMQ RURAL",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(Ac_Ec_rural), bold = TRUE) |>
  add_header_above(c(" " = 1, "Sector formal" = 2, "Sector informal" = 2,
                     "Empleo doméstico" = 2, "No clasificado" = 2, " " = 1))

# todo DMQ
Ac_Ec_tbl_DMQ <- kable(Ac_Ec_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "SECTORIZACIÓN DE LOS EMPLEADOS - ZONA DMQ",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(Ac_Ec_DMQ), bold = TRUE) |>
  add_header_above(c(" " = 1, "Sector formal" = 2, "Sector informal" = 2,
                     "Empleo doméstico" = 2, "No clasificado" = 2, " " = 1))

Ac_Ec_tbl_ciudad
Ac_Ec_tbl_DMQ
Ac_Ec_tbl_urbano
Ac_Ec_tbl_rural

```

## Grupos de actividad por sectores

```{r}
#| echo: false
#| message: false
#| warning: false
#| column: page

# Quito ciudad 

grupo_ciudad <- DMQ_ciudad |>
  filter(!is.na(grupo1)) |>
  group_by(secemp, grupo1) |>
  summarise(total = sum(fexp)) |>
  rename(`Grupo de actividad` = grupo1,
         Sector = secemp) |>
  mutate(`Grupo de actividad` =  recode(`Grupo de actividad`,
                              `1` = "Personal direct./admin. pública y empresas",
                              `2` = "Profesionales científicos e intelectuales",
                              `3` = "Técnicos y profesionales de nivel medio",
                              `4` = "Empleados de oficina",
                              `5` = "Trabajad. de los servicios y comerciantes",
                              `6` = "Trabajad. calificados agropecuarios y pesqueros",
                              `7` = "Oficiales operarios y artesanos",
                              `8` = "Operadores de instalac. máquinas y montad",
                              `9` = "Trabajadores no calificados, ocupaciones elementales",
                              `10` = "Fuerzas Armadas",
                              `99` = "No especificado")) |>
  mutate(Sector = recode(Sector,
                         `1` = "Sector Formal",
                         `2` = "Sector Informal",
                         `3` = "Empleo Doméstico",
                         `4` = "No Clasificados por Sector")) |>
  mutate(Porcentaje =total / sum(total) * 100)

# Ampliar la tabla horizontalmente

grupo_ciudad <- grupo_ciudad %>%
  pivot_wider(names_from = Sector,
           values_from = c(total, Porcentaje)) %>%
  mutate(`Total general` =   rowSums(select(., starts_with("total_"), num_range("total_", 2:5)), na.rm = TRUE)) %>%
  ungroup() %>%
  rename(`Total SF`= "total_Sector Formal",
         `Total SI`= "total_Sector Informal",
         `Total ED`= "total_Empleo Doméstico",
         `Total NC` = "total_No Clasificados por Sector",
         `Porcentaje SF` = "Porcentaje_Sector Formal",
         `Porcentaje SI` = "Porcentaje_Sector Informal",
         `Porcentaje ED`= "Porcentaje_Empleo Doméstico",
         `Porcentaje NC` = "Porcentaje_No Clasificados por Sector") %>%
  select(`Grupo de actividad`,`Total SF`, `Porcentaje SF` ,
         `Total SI`, `Porcentaje SI`,`Total ED`,`Porcentaje ED`,`Total NC`,
         `Porcentaje NC`, `Total general`) 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- grupo_ciudad |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
grupo_ciudad <- bind_rows(grupo_ciudad, sumas)

grupo_ciudad$`Grupo de actividad`[nrow(grupo_ciudad)] <- "Total" 

# Reemplazar NA por ""
grupo_ciudad <- grupo_ciudad |>
  mutate(across(starts_with("Total"), ~if_else(is.na(.), 0, .)))|>
  mutate(across(starts_with("Porcentaje"), ~if_else(is.na(.), 0, .)))


# DMQ urbano

grupo_urbano <- DMQ_urbano_2023 |>
  filter(!is.na(grupo1)) |>
  group_by(secemp, grupo1) |>
  summarise(total = sum(fexp)) |>
  rename(`Grupo de actividad` = grupo1,
         Sector = secemp) |>
  mutate(`Grupo de actividad` =  recode(`Grupo de actividad`,
                              `1` = "Personal direct./admin. pública y empresas",
                              `2` = "Profesionales científicos e intelectuales",
                              `3` = "Técnicos y profesionales de nivel medio",
                              `4` = "Empleados de oficina",
                              `5` = "Trabajad. de los servicios y comerciantes",
                              `6` = "Trabajad. calificados agropecuarios y pesqueros",
                              `7` = "Oficiales operarios y artesanos",
                              `8` = "Operadores de instalac. máquinas y montad",
                              `9` = "Trabajadores no calificados, ocupaciones elementales",
                              `10` = "Fuerzas Armadas",
                              `99` = "No especificado")) |>
  mutate(Sector = recode(Sector,
                         `1` = "Sector Formal",
                         `2` = "Sector Informal",
                         `3` = "Empleo Doméstico",
                         `4` = "No Clasificados por Sector")) |>
  mutate(Porcentaje =total / sum(total) * 100)

# Ampliar la tabla horizontalmente

grupo_urbano <- grupo_urbano %>%
  pivot_wider(names_from = Sector,
           values_from = c(total, Porcentaje)) %>%
  mutate(`Total general` =   rowSums(select(., starts_with("total_"), num_range("total_", 2:5)), na.rm = TRUE)) %>%
  ungroup() %>%
  rename(`Total SF`= "total_Sector Formal",
         `Total SI`= "total_Sector Informal",
         `Total ED`= "total_Empleo Doméstico",
         `Total NC` = "total_No Clasificados por Sector",
         `Porcentaje SF` = "Porcentaje_Sector Formal",
         `Porcentaje SI` = "Porcentaje_Sector Informal",
         `Porcentaje ED`= "Porcentaje_Empleo Doméstico",
         `Porcentaje NC` = "Porcentaje_No Clasificados por Sector") %>%
  select(`Grupo de actividad`,`Total SF`, `Porcentaje SF` ,
         `Total SI`, `Porcentaje SI`,`Total ED`,`Porcentaje ED`,`Total NC`,
         `Porcentaje NC`, `Total general`) 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- grupo_urbano |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
grupo_urbano <- bind_rows(grupo_urbano, sumas)

grupo_urbano$`Grupo de actividad`[nrow(grupo_urbano)] <- "Total" 

# Reemplazar NA por ""
grupo_urbano <- grupo_urbano |>
  mutate(across(starts_with("Total"), ~if_else(is.na(.), 0, .)))|>
  mutate(across(starts_with("Porcentaje"), ~if_else(is.na(.), 0, .)))

# DMQ rural 

grupo_rural <- DMQ_rural_2023 |>
  filter(!is.na(grupo1)) |>
  group_by(secemp, grupo1) |>
  summarise(total = sum(fexp)) |>
  rename(`Grupo de actividad` = grupo1,
         Sector = secemp) |>
  mutate(`Grupo de actividad` =  recode(`Grupo de actividad`,
                              `1` = "Personal direct./admin. pública y empresas",
                              `2` = "Profesionales científicos e intelectuales",
                              `3` = "Técnicos y profesionales de nivel medio",
                              `4` = "Empleados de oficina",
                              `5` = "Trabajad. de los servicios y comerciantes",
                              `6` = "Trabajad. calificados agropecuarios y pesqueros",
                              `7` = "Oficiales operarios y artesanos",
                              `8` = "Operadores de instalac. máquinas y montad",
                              `9` = "Trabajadores no calificados, ocupaciones elementales",
                              `10` = "Fuerzas Armadas",
                              `99` = "No especificado")) |>
  mutate(Sector = recode(Sector,
                         `1` = "Sector Formal",
                         `2` = "Sector Informal",
                         `3` = "Empleo Doméstico",
                         `4` = "No Clasificados por Sector")) |>
  mutate(Porcentaje =total / sum(total) * 100)

# Ampliar la tabla horizontalmente

grupo_rural <- grupo_rural %>%
  pivot_wider(names_from = Sector,
           values_from = c(total, Porcentaje)) %>%
  mutate(`Total general` =   rowSums(select(., starts_with("total_"), num_range("total_", 2:5)), na.rm = TRUE)) %>%
  ungroup() %>%
  rename(`Total SF`= "total_Sector Formal",
         `Total SI`= "total_Sector Informal",
         `Total ED`= "total_Empleo Doméstico",
         `Total NC` = "total_No Clasificados por Sector",
         `Porcentaje SF` = "Porcentaje_Sector Formal",
         `Porcentaje SI` = "Porcentaje_Sector Informal",
         `Porcentaje ED`= "Porcentaje_Empleo Doméstico",
         `Porcentaje NC` = "Porcentaje_No Clasificados por Sector") %>%
  select(`Grupo de actividad`,`Total SF`, `Porcentaje SF` ,
         `Total SI`, `Porcentaje SI`,`Total ED`,`Porcentaje ED`,`Total NC`,
         `Porcentaje NC`, `Total general`) 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- grupo_rural |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
grupo_rural <- bind_rows(grupo_rural, sumas)

grupo_rural$`Grupo de actividad`[nrow(grupo_rural)] <- "Total" 

# Reemplazar NA por ""
grupo_rural <- grupo_rural |>
  mutate(across(starts_with("Total"), ~if_else(is.na(.), 0, .)))|>
  mutate(across(starts_with("Porcentaje"), ~if_else(is.na(.), 0, .)))

# DMQ total 

grupo_DMQ <- DMQ_2023 |>
  filter(!is.na(grupo1)) |>
  group_by(secemp, grupo1) |>
  summarise(total = sum(fexp)) |>
  rename(`Grupo de actividad` = grupo1,
         Sector = secemp) |>
  mutate(`Grupo de actividad` =  recode(`Grupo de actividad`,
                              `1` = "Personal direct./admin. pública y empresas",
                              `2` = "Profesionales científicos e intelectuales",
                              `3` = "Técnicos y profesionales de nivel medio",
                              `4` = "Empleados de oficina",
                              `5` = "Trabajad. de los servicios y comerciantes",
                              `6` = "Trabajad. calificados agropecuarios y pesqueros",
                              `7` = "Oficiales operarios y artesanos",
                              `8` = "Operadores de instalac. máquinas y montad",
                              `9` = "Trabajadores no calificados, ocupaciones elementales",
                              `10` = "Fuerzas Armadas",
                              `99` = "No especificado")) |>
  mutate(Sector = recode(Sector,
                         `1` = "Sector Formal",
                         `2` = "Sector Informal",
                         `3` = "Empleo Doméstico",
                         `4` = "No Clasificados por Sector")) |>
  mutate(Porcentaje =total / sum(total) * 100)

# Ampliar la tabla horizontalmente

grupo_DMQ <- grupo_DMQ |>
  pivot_wider(names_from = Sector,
           values_from = c(total, Porcentaje)) %>%
  mutate(`Total general` =   rowSums(select(., starts_with("total_"), num_range("total_", 2:5)), na.rm = TRUE)) %>%
  ungroup() %>%
  rename(`Total SF`= "total_Sector Formal",
         `Total SI`= "total_Sector Informal",
         `Total ED`= "total_Empleo Doméstico",
         `Total NC` = "total_No Clasificados por Sector",
         `Porcentaje SF` = "Porcentaje_Sector Formal",
         `Porcentaje SI` = "Porcentaje_Sector Informal",
         `Porcentaje ED`= "Porcentaje_Empleo Doméstico",
         `Porcentaje NC` = "Porcentaje_No Clasificados por Sector") %>%
  select(`Grupo de actividad`,`Total SF`, `Porcentaje SF` ,
         `Total SI`, `Porcentaje SI`,`Total ED`,`Porcentaje ED`,`Total NC`,
         `Porcentaje NC`, `Total general`) 

# Primero, calculamos las sumas de las columnas numéricas
sumas <- grupo_DMQ |>
  summarise(across(where(is.numeric), sum, na.rm = TRUE))

# Creamos una nueva fila con las sumas y la añadimos al dataframe
grupo_DMQ <- bind_rows(grupo_DMQ, sumas)

grupo_DMQ$`Grupo de actividad`[nrow(grupo_DMQ)] <- "Total" 

# Reemplazar NA por ""
grupo_DMQ <- grupo_DMQ |>
  mutate(across(starts_with("Total"), ~if_else(is.na(.), 0, .)))|>
  mutate(across(starts_with("Porcentaje"), ~if_else(is.na(.), 0, .)))

# Imprimimos las tablas para documento

#  Quito ciudad
grupo_tbl_ciudad <- kable(grupo_ciudad,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "SECTORIZACIÓN DE LOS EMPLEADOS - QUITO CIUDAD",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(grupo_ciudad), bold = TRUE) |>
  add_header_above(c(" " = 1, "Sector formal" = 2, "Sector informal" = 2,
                     "Empleo doméstico" = 2, "No clasificado" = 2, " " = 1))

# DMQ Urbano
grupo_tbl_urbano <- kable(grupo_urbano,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "SECTORIZACIÓN DE LOS EMPLEADOS - DMQ URBANO",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(grupo_urbano), bold = TRUE) |>
  add_header_above(c(" " = 1, "Sector formal" = 2, "Sector informal" = 2,
                     "Empleo doméstico" = 2, "No clasificado" = 2, " " = 1))

# DMQ rural
grupo_tbl_rural <- kable(grupo_rural,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "SECTORIZACIÓN DE LOS EMPLEADOS - DMQ RURAL",
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(grupo_rural), bold = TRUE) |>
  add_header_above(c(" " = 1, "Sector formal" = 2, "Sector informal" = 2,
                     "Empleo doméstico" = 2, "No clasificado" = 2, " " = 1))

# todo DMQ
grupo_tbl_DMQ <- kable(grupo_DMQ,
     format.args = list(decimal.mark =",", big.mark = "."),
     caption = "SECTORIZACIÓN DE LOS EMPLEADOS - ZONA DMQ",
    
     format = "html",
     digits = 2,
     group.size = 3,
  ) |>
  kable_styling(bootstrap_options = c("hover")) |>
  row_spec(nrow(grupo_DMQ), bold = TRUE) |>
  add_header_above(c(" " = 1, "Sector formal" = 2, "Sector informal" = 2,
                     "Empleo doméstico" = 2, "No clasificado" = 2, " " = 1))

grupo_tbl_ciudad
grupo_tbl_DMQ
grupo_tbl_urbano
grupo_tbl_rural

```

# Bibliografía

Instituto Nacional de Estadísticas y Censos (INEC). (2018). Encuesta Nacional de Empleo, Desempleo y Subempleo (ENEMDU). Encuesta Nacional de Empleo, Desempleo y Subempleo (ENEMDU). Quito, Pinchincha, Ecuador.

